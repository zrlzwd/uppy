<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Uppy File Uploader</title>
  <icon>https://www.gravatar.com/avatar/430a3bdebe520801a4b4c53d1c8590c5</icon>
  <subtitle>Almost as cute as a puppy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://uppy.io/"/>
  <updated>2018-07-11T00:28:44.469Z</updated>
  <id>https://uppy.io/</id>
  
  <author>
    <name>Transloadit</name>
    <email>uppybot@uppy.io</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Uppy 0.25: Drag &amp; Drop Links Urls &amp; Images, Improved File Selecting in Providers, Interactive Components In i18n</title>
    <link href="https://uppy.io/blog/2018/06/0.25/"/>
    <id>https://uppy.io/blog/2018/06/0.25/</id>
    <published>2018-06-07T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.469Z</updated>
    
    <content type="html"><![CDATA[<p>Uppy 0.25 comes with a couple of new features, like drag-and-dropping URLs and images with the Url plugin, Dashboard modal animation and interactive components in i18n strings, as well as a ton of under the hood fixes and improvements.</p><a id="more"></a><h2 id="Select-In-Providers"><a href="#Select-In-Providers" class="headerlink" title="Select In Providers"></a>Select In Providers</h2><p><img src="/images/blog/0.25/new-select-provider.jpg"></p><p>Selecting files doesn’t add files to Uppy immediately anymore. Instead a “Select” button appears (with a counter), and pressing that adds all the files with checked checkboxes and closes the Instagram or Google Drive overlay. Cancel discards the selection and also closes the overlay.</p><p>This addresses an undesirable case where <code>autoProceed: true</code> would begin uploading files the moment you ticked a checkbox, and you couldn’t see what was going on because the provider overlay was still open.</p><h2 id="Drag-amp-Drop-or-Paste-Links-And-Images-with-the-Url-Plugin"><a href="#Drag-amp-Drop-or-Paste-Links-And-Images-with-the-Url-Plugin" class="headerlink" title="Drag &amp; Drop or Paste Links And Images with the Url Plugin"></a>Drag &amp; Drop or Paste Links And Images with the Url Plugin</h2><p>If you use the <a href="/docs/url/">Url plugin</a> with the <a href="/docs/dashboard">Dashboard</a>, you can now drop or paste URLs into the main Dashboard area. They will automatically be imported by the Url plugin:</p><figure class="wide"><video alt="Demo video showing Uppy with Url plugin that accepts drag and dropped urls" autoplay loop muted playsinline=""><source src="/images/blog/0.25/link-drop-demo.mp4" type="video/mp4">Your browser does not support the video tag, you can <a href="/images/blog/0.25/link-drop-demo.mp4">download the video</a> to watch it.</video></figure><h2 id="i18n-Strings-with-Interactive-Components"><a href="#i18n-Strings-with-Interactive-Components" class="headerlink" title="i18n Strings with Interactive Components"></a>i18n Strings with Interactive Components</h2><p>⚠️ <strong>breaking</strong></p><p>We’ve changed how i18n strings work with interactive components. We now use a placeholder for e.g. buttons, so it works nicely in languages that have different word order than English. Example:</p><figure class="highlight js"><table><tr><td class="code"><pre>dropPasteImport<span class="token punctuation">:</span> <span class="token string">'Drop files here, paste, import from one of the locations above or %{browse}'</span>browse<span class="token punctuation">:</span> <span class="token string">'browse'</span></pre></td></tr></table></figure><p><code>%{browse}</code> will be replaced with a button/link. Previously, these two strings were concatenated in the view layer, so the <code>browse</code> text would always be last.</p><p>Here’s a list of strings that were changed in this release, please update those in your locales:</p><ul><li>core: <code>failedToUpload</code> needs to contain <code>%{file}</code>, substituted by the name of the file that failed</li><li>dashboard: <code>dropPaste</code> and <code>dropPasteImport</code> need to contain <code>%{browse}</code>, substituted by the “browse” text button</li><li>dashboard: <code>editing</code> needs to contain <code>%{file}</code>, substituted by the name of the file being edited</li><li>dashboard: <code>fileSource</code> and <code>importFrom</code> need to contain <code>%{name}</code>, substituted by the name of the provider</li><li>dragdrop: <code>dropHereOr</code> needs to contain <code>%{browse}</code>, substituted by the “browse” text button</li></ul><p>The full list of available locale strings for each plugin is now documented in the <a href="/docs/">Uppy Docs</a>.</p><h2 id="React-Documentation"><a href="#React-Documentation" class="headerlink" title="React Documentation"></a>React Documentation</h2><p>React docs have been improved: we now have a <a href="/docs/react/">separate page</a> for each Uppy React wrapper component that we offer.</p><p>Other improvements in docs:</p><ul><li>The <code>id</code> option is now listed on each plugin’s documentation page.</li><li>The <code>replaceTargetContent</code> option is listed on UI plugin documentation pages.</li><li>The <code>locale</code> option is described on each plugin documentation page, and includes a short description for each string.</li></ul><h2 id="Typescript-Definitions"><a href="#Typescript-Definitions" class="headerlink" title="Typescript Definitions"></a>Typescript Definitions</h2><p><a href="https://github.com/taoqf" target="_blank" rel="noopener">@taoqf</a> went ahead and added a lot of type definitions to Uppy in <a href="https://github.com/transloadit/uppy/pull/834" target="_blank" rel="noopener">#834</a>. So if you are using TypeScript (and even if not, your code editor / linting tool likely supports type definitions), you are in for a treat!</p><h2 id="No-need-to-run"><a href="#No-need-to-run" class="headerlink" title="No need to .run()"></a>No need to <code>.run()</code></h2><p>⚠️<strong>breaking</strong></p><p>We removed the need to type <code>uppy.run()</code> in <a href="https://github.com/transloadit/uppy/pull/793" target="_blank" rel="noopener">#793</a>. You now only have to call <code>.use()</code> for the plugins that you need (as usual), and everything is then run automatically. It comes with a few tradeoffs but we were getting a big amount of support tickets where people forgot to conclude with <code>.run()</code>, and we saw a chance to reduce boilerplate, so we decided to go ahead and pave the cowpath.</p><h2 id="Authorisation-tokens-in-Local-Storage"><a href="#Authorisation-tokens-in-Local-Storage" class="headerlink" title="Authorisation tokens in Local Storage"></a>Authorisation tokens in Local Storage</h2><p>⚠️<strong>breaking</strong></p><p>Authorisation tokens from Uppy Server are now stored in local storage as opposed to cookies. Two primary reasons for this decision are:</p><ol><li>It avoids CSRF issues which are present when using cookies.</li><li>It allows for less stringent <a href="https://github.com/transloadit/uppy/issues/803#issuecomment-386257515" target="_blank" rel="noopener">CORS policies enforced by browsers</a>, since we are no longer sending cookie credentials via Ajax requests.</li></ol><p>This is a breaking change because it requires that the Uppy Server version should also be updated to <strong>0.13.x</strong> otherwise there could be unexpected behaviour.</p><p>What’s more about the Authorisation tokens is that they are now encrypted on the server before being sent down to the client. Subsequent requests from the client will then send the token to the server via headers (not via cookies anymore).</p><h2 id="Other-Cool-Changes"><a href="#Other-Cool-Changes" class="headerlink" title="Other Cool Changes"></a>Other Cool Changes</h2><ul><li>Fix: Debounce render calls again, fixes #669 (#796)</li><li>Fix: XHRUpload canceled uploads progress events (#864)</li><li>Improvement: Dashboard open/close animation (#852)</li><li>Improvement: You can now hide action buttons in Dashboard and StatusBar (#821)</li><li>Improvement: Pass <code>allowedFileTypes</code> and <code>maxNumberOfFiles</code> to <code>input[type=file]</code> to add restrictions to the system file picking dialog too (#814)</li><li>Improvement: merge meta data when add file (#810)</li><li>Fix: More robust failure handling for Transloadit, closes #708 (#805)</li><li>Feature: display username/email in provider view</li><li>Feature: show message for empty provider files</li><li>Server: Allow custom headers to be set for remote multipart uploads</li><li>Server: Add type to metadata as <code>filetype</code></li></ul><p>⚠️<strong>heads up</strong></p><p>In the next release we are planning a <a href="https://github.com/transloadit/uppy/pull/906" target="_blank" rel="noopener">Lerna conversion</a>, meaning that each Uppy plugin / module will get its own NPM package. Pretty excited about that one! (but also please refrain from sending us big PRs in the meantime :)</p><p>See you in the next one!</p><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Uppy 0.25 comes with a couple of new features, like drag-and-dropping URLs and images with the Url plugin, Dashboard modal animation and interactive components in i18n strings, as well as a ton of under the hood fixes and improvements.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.24: Refreshed Dashboard, StatusBar and Provider UI, revamped XHR Response Handling</title>
    <link href="https://uppy.io/blog/2018/04/0.24/"/>
    <id>https://uppy.io/blog/2018/04/0.24/</id>
    <published>2018-04-17T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.469Z</updated>
    
    <content type="html"><![CDATA[<p>Uppy 0.24.2 brings a refreshed UI in the Dashboard and StatusBar plugins, a synchronous <code>addFile()</code> method, a cancel button, style protections, documentation on writing your own Uppy plugin, revamped XHR response handling and tons of bugfixes.</p><a id="more"></a><h2 id="Refreshed-Dashboard-and-Providers"><a href="#Refreshed-Dashboard-and-Providers" class="headerlink" title="Refreshed Dashboard and Providers"></a>Refreshed Dashboard and Providers</h2><p>As always, we are trying to simplify and improve the UI of Uppy plugins. In this release, Dashboard’s design has been refreshed, check this out:</p><p><img class="border" src="/images/blog/0.24/dashboard-main.jpg"></p><p><img class="border" src="/images/blog/0.24/uppy-screenshot.jpg"></p><p>Meta editing screen:</p><p><img class="border" src="/images/blog/0.24/dashboard-meta-edit.jpg"></p><p>Camera screen:</p><p><img class="border" src="/images/blog/0.24/import-from-camera.jpg"></p><p>Import from URL (Link):</p><p><img class="border" src="/images/blog/0.24/import-from-url.jpg"></p><p>And more, check out the <a href="https://uppy.io/examples/dashboard/">Dashboard example page</a>.</p><h2 id="A-Cleaner-StatusBar"><a href="#A-Cleaner-StatusBar" class="headerlink" title="A Cleaner StatusBar"></a>A Cleaner StatusBar</h2><p>The StatusBar plugin used to show a lot of progress details. This has been simplified so that by default it will only show a percentage:</p><p><img src="/images/blog/0.24/statusbar-2.jpg"></p><p>But there’s an option <code>showProgressDetails: true</code> for both the StatusBar and Dashboard (which passes it to StatusBar included in the Dashboard) to bring back this detailed information, spread over two lines:</p><p><img src="/images/blog/0.24/statusbar-1.jpg"></p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>StatusBar<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token punctuation">,</span> showProgressDetails<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// or</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Dashboard<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token punctuation">,</span> showProgressDetails<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>We’ve also added a handy “cancel” button, which will cancel everything in progress regardless of the type of the upload (wether uppy-server or local powered, and wether tus-resumable or old school XHR/form uploads).</p><h2 id="XHR-Response-Handling"><a href="#XHR-Response-Handling" class="headerlink" title="XHR Response Handling"></a>XHR Response Handling</h2><p>When the upload completes (regardless of whether it succeeded), a <code>response</code> key gets added to the file. <code>file.response</code> contains a <code>status</code> and <code>data</code> properties. <code>data</code> is the result of the <code>getResponseData()</code> option. The <code>getResponseData()</code> function’s signature is now:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token function">getResponseData</span> <span class="token punctuation">(</span>responseText<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></pre></td></tr></table></figure><p>This is what the default JSON parsing implementation looks like in the <code>XHRUpload</code> plugin, but you can override it with your own:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token function">getResponseData</span> <span class="token punctuation">(</span>responseText<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> parsedResponse <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    parsedResponse <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>responseText<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> parsedResponse<span class="token punctuation">}</span></pre></td></tr></table></figure><p>The <code>responseText</code> is the XHR endpoint response as a string. For uploads from the user’s device, <code>response</code> is the <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest</a> object.</p><p>When uploading files from remote providers such as Dropbox or Instagram, Uppy Server sends upload response data to the client. This is made available in the <code>getResponseData()</code> option as well. The <code>response</code> object from Uppy Server contains some properties named after their <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">XMLHttpRequest</a> counterparts:</p><ul><li><code>response.responseText</code> - the XHR endpoint response as a string;</li><li><code>response.status</code> - the HTTP status code;</li><li><code>response.statusText</code> - the HTTP status text;</li><li><code>response.headers</code> - an object mapping lowercase header names to their values.</li></ul><h2 id="Powered-by-Uppy"><a href="#Powered-by-Uppy" class="headerlink" title="Powered by Uppy"></a>Powered by Uppy</h2><p>Uppy is provided free for the world forever. In return, we ask that you consider keeping a tiny tasteful Uppy logo at the bottom of the Dashboard, so that more people can discover and enjoy Uppy. This <em>really helps</em> to grow our community which will result in more issues reported, more contributors, more features requested, more PRs merged, and a better Uppy for you to use tomorrow, for free, forever.</p><p>If you don’t want to do this indefinitely, consider doing this initially, just to help us reach critical mass and get our <em>perpetuum mobile</em> going.</p><p>But, Uppy is also free as in freedom. And so if you can’t help our cause, set <code>proudlyDisplayPoweredByUppy</code> to <code>false</code> to hide te Uppy logo.</p><p><img src="/images/blog/0.24/powered-by-1.jpg"></p><h2 id="Server-News"><a href="#Server-News" class="headerlink" title="Server News"></a>Server News</h2><p>We occasionally get questions about the required servers for Uppy. Uppy does not require special servers. You can use Uppy for free in the browser and let it upload to your existing Apache/Nginx server. Sprinkle a few lines of HTML/JS and that’s it. </p><p><strong>If you want integration with Instagram</strong> Dropbox and friends, you’ll need to run an ‘Uppy Server’ in the datacenter to help with OAuth secrecy and fetching large files and uploading those, bypassing the client. No fun to have several gigabytes pass through your mobile tubes - best let the datacenters sort this out among themselves. That’s what Uppy Server is for.</p><p><strong>If you want resumable uploads</strong>, you’ll need a <a href="https://tus.io/" target="_blank" rel="noopener">https://tus.io/</a> speaking server. </p><p>You can run these optional servers yourself, or use the hosted variants provided by our company <a href="https://transloadit.com/" target="_blank" rel="noopener">Transloadit</a> for 💸. Transloadit also adds a wide range of encoding/processing features.</p><p>Now that that’s sorted out, let’s see what we improved on the Uppy Server side! We tackled a number of security issues:</p><ul><li>Fixed security vulnerability in transient dependency <a href="https://github.com/transloadit/uppy-server/issues/70" target="_blank" rel="noopener">#70</a></li><li>Auto-generate tmp download file name to avoid Path traversal</li><li>Namespace redis key storage/lookup to avoid collisions</li><li>Validate callback redirect url after completing OAuth</li><li>Reduce the permission level required by Google Drive</li></ul><p>Other non-security improvements are:</p><ul><li>Auto-generate Server secret if none is provided on startup</li><li>We implemented a more standard logger for Uppy Server</li><li>Added an example project to run Uppy Server on Serverless, <a href="https://github.com/transloadit/uppy-server/tree/master/examples/serverless" target="_blank" rel="noopener">see</a>.</li></ul><h2 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h2><ul><li>Uppy Server docs now point to a detailed write-up on how to run Uppy Server on Kubernetes (#706 / @kiloreux)</li><li>An Uppy Server custom provider example has been added, so now it’s easier create your own custom providers.</li><li>Added more useful events, i18n strings, fixed typos, and other polish.</li></ul><h2 id="Other-Fixes-amp-Improvements"><a href="#Other-Fixes-amp-Improvements" class="headerlink" title="Other Fixes &amp; Improvements"></a>Other Fixes &amp; Improvements</h2><ul><li>⚠️ <strong>breaking</strong> <code>addFile()</code>, <code>onBeforeFileAdded()</code> and <code>onBeforeUpload()</code> are now synchronous and have to return nothing or file objects to proceed, or false to abort; please check out the update docs for details: <a href="https://uppy.io/docs/uppy/#onBeforeFileAdded">onBeforeFileAdded()</a> and <a href="https://uppy.io/docs/uppy/#onBeforeUpload">onBeforeUpload()</a>.</li><li>⚠️ <strong>breaking</strong> Most events now emit the whole <code>file</code> object instead of a <code>fileId</code>. So you can access <code>file.name</code> right away, for example, so you no longer have to fish for the file using its id.</li><li>⚠️ <strong>breaking</strong> We’ve added <code>postcss-safe-important</code> to our style build step, so now 90% of rules got <code>!important</code> declaration added to them. This is done to prevent page styles (especially global ones like from Bootstrap) from leaking into the Uppy widget. There are other solutions we are looking into, like iFrames and WebComponents, this is an experiment. Keep in mind that to override Uppy styles, you now have to also use <code>!important</code>.</li><li>dashboard: ⚠️ <strong>breaking</strong> <code>maxWidth</code>, <code>maxHeight</code> options have been converted to <code>width</code> and <code>height</code>, because this makes more sense, <code>maxWidth</code> and <code>maxHeight</code> are actually <code>100%</code>.</li><li>There is now an option <code>showLinkToFileUploadResult: false</code> to disable linking to the upload result in Dashboard UI.</li><li>We are now using the image time and date as a file name in Instagram, instead of a generic file id.</li><li>The URL plugin now checks for HTTP(S) protocol, and adds HTTP by default if no protocol is present.</li><li>It’s now possible to override <code>&lt;DashboardModal /&gt;</code> React component’s target prop.</li><li>Provider views now have <code>showFilter</code> and <code>showBreadcrumbs</code> options, those are <code>false</code> for the Instagram plugin, for example.</li><li>Uppy Server to Client communication has been refactored into <code>Provider</code> and <code>Request</code> modules. <code>Request</code> can be used when a simple request needs to be made to Uppy Server, like in the URL plugin. <code>Provider</code> is used for more complex implementations shared between Google Drive and Instagram, for example.</li></ul><p>Finally, we’ve added a Transloadit example to the website, <a href="https://uppy.io/examples/transloadit/">check it out</a>.</p><p>Have fun,</p><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Uppy 0.24.2 brings a refreshed UI in the Dashboard and StatusBar plugins, a synchronous &lt;code&gt;addFile()&lt;/code&gt; method, a cancel button, style protections, documentation on writing your own Uppy plugin, revamped XHR response handling and tons of bugfixes.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.23: Import from Url, refactored thumbnail generation, XHR bundle</title>
    <link href="https://uppy.io/blog/2018/02/0.23/"/>
    <id>https://uppy.io/blog/2018/02/0.23/</id>
    <published>2018-02-12T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.469Z</updated>
    
    <content type="html"><![CDATA[<p>Hi all! We are back from holidays with a shiny new <code>0.23.0</code> release for you! It’s packed with a new <code>Url</code> plugin (imports files from urls), refactored <code>ThumbnailGenerator</code>, <code>Webcam</code> improvements and more.</p><h2 id="Import-from-Url"><a href="#Import-from-Url" class="headerlink" title="Import from Url"></a>Import from Url</h2><p>Meet our new “Provider” plugin, <code>Url</code>. It’s simple, yet powerful: paste a link to any file on the web, and Uppy with Uppy Server will upload it wherever you need.</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Url<span class="token punctuation">,</span> <span class="token punctuation">{</span> target<span class="token punctuation">:</span> Dashboard<span class="token punctuation">,</span> host<span class="token punctuation">:</span> <span class="token constant">YOUR_UPPY_SERVER_URL</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><figure class="wide"><video alt="Demo video showing Uppy with Url plugin that imports files from urls" controls autoplay><source src="/images/blog/0.23/uppy-url-demo.mp4" type="video/mp4">Your browser does not support the video tag, you can <a href="/images/blog/0.23/uppy-url-demo.mp4">download the video</a> to watch it.</video></figure><a id="more"></a><h2 id="ThumbnailGenerator"><a href="#ThumbnailGenerator" class="headerlink" title="ThumbnailGenerator"></a>ThumbnailGenerator</h2><p>Thumbnail generation has been refactored to a separate <code>ThumbnailGenerator</code> plugin, thanks to the PR from <a href="https://github.com/richardwillars" target="_blank" rel="noopener">@richardwillars</a>. So Uppy Core is now more lightweight, if you don’t need previews.</p><p><code>ThumbnailGenerator</code> is still bundled with our most feature complete <code>Dashboard</code> plugin though, so you don’t have to change anything if you were using that.</p><p>We’ve also fixed previews in Safari and tweaked the code slightly after reading the excellent <a href="https://blog.uploadcare.com/image-resize-in-browsers-is-broken-e38eed08df01" target="_blank" rel="noopener">Image resize in browsers is broken</a> post by Uploadcare 👌.</p><h2 id="Processing-results"><a href="#Processing-results" class="headerlink" title="Processing results"></a>Processing results</h2><p>Processing results from encoding plugins like <a href="https://uppy.io/docs/transloadit/"><code>Transloadit</code></a>, are now added to <code>complete</code> event:</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment">// result: {</span>  <span class="token comment">//   failed: [...],</span>  <span class="token comment">//   successful: [...],</span>  <span class="token comment">//   transloadit: [...],</span>  <span class="token comment">//   uploadID: "cjdnzj2zy0000c___iewu9m5y"</span>  <span class="token comment">//}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>And to <code>uppy.upload()</code> promise result too:</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>You can still use events like <a href="https://uppy.io/docs/transloadit/#transloadit-result"><code>transloadit:result</code></a>, its just easier when things are in the same place. Plugins can use the new <code>uppy.addResultData()</code> API to add data to the <code>result</code>, like so:</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">addResultData</span><span class="token punctuation">(</span>uploadID<span class="token punctuation">,</span> <span class="token punctuation">{</span> transloadit<span class="token punctuation">:</span> assemblies <span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="Webcam"><a href="#Webcam" class="headerlink" title="Webcam"></a>Webcam</h2><p>The Webcam plugin now mirrors image previews by default, so when you are making a selfie and wave with your right hand, you see that right hand in the Webcam preview, just like in the mirror. This option can be disabled via <code>uppy.use(Webcam, { mirror: false }</code>. Note that the resulting image will not be mirrored, so your hand will actually be waving on the left. This mimics the behaviour of smarphone selfie cameras.</p><p>We’ve also added an option to select which camera will be used to capture pictures or video: <a href="https://uppy.io/docs/webcam/#facingMode-39-user-39">facingMode</a>, set to <code>user</code> (front camera) by default.</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><ul><li>You can now specify a config path when starting the standalone Uppy Server like so <code>uppy-server --config /path/to/uppyconf.json</code>. The config file is expected to be a JSON file with the same schema as the <a href="https://uppy.io/docs/server/#Options">Uppy Server options</a>.</li><li>A periodic cleanup job has been added to Uppy Server, to delete stale upload files from the specified <code>filePath</code>. Even though we’d rarely expect uploaded files to go undeleted immediately, there could be cases where an error occurs during an upload, and so Uppy Server leaves the file undeleted to give room for upload retries. With the cleanup job in place, we can ensure that this file would eventually be deleted after the file upload is done.</li><li>Responses from Multipart uploads are now relayed to Uppy Client as they are received from the target server. With this in place, you can now handle responses from local and remote XHRUpload in nearly the same way.</li></ul><h2 id="Other-Improvements-and-Additions"><a href="#Other-Improvements-and-Additions" class="headerlink" title="Other Improvements and Additions"></a>Other Improvements and Additions</h2><ul><li>Added new option to hide ProgressBar and StatusBar after upload finish (#485 / @wilkoklak)</li><li>Chaining API has been improved, you can now use <code>.on</code> and <code>.off</code> anywhere: <code>uppy.use(Dashboard).use(Tus).on(&#39;complete&#39;, handleComplete).run()</code></li><li>The Transloadit plugin now has a new <code>transloadit:assembly-executing</code> event and passes Assembly results to the <code>complete</code> callback (#547, #527 / @goto-bus-stop)</li><li>We’ve added a <code>bundle</code> option to the <code>XHRUpload</code> plugin to send multiple files in one request (#442 / @goto-bus-stop)</li><li>Uppy releases are now hosted on Edgly CDN by Transloadit</li><li>A Third-party extension for integrating the Ngrx Angular state management library with Uppy has been released, <a href="https://github.com/rimlin/uppy-store-ngrx/" target="_blank" rel="noopener">uppy-store-ngrx</a> by @rimlin</li></ul><h2 id="Other-Fixes"><a href="#Other-Fixes" class="headerlink" title="Other Fixes"></a>Other Fixes</h2><ul><li>Fixed blank preview thumbnails for images in Safari; use slightly different step scaling (#458, #584 / @arturi)</li><li>We now log in console and show an Informer message, not error in console, when file cannot be added due to restrictions (#604, #492 / @goto-bus-stop).</li><li>Unused files have been removed from published package, saving many many precious megabytes :) (#586 / @goto-bus-stop)</li><li>Use empty input value so same file can be selected multiple times (@arturi / #534)</li><li>Fix modal and page scroll (#564 / @arturi)</li><li>Refactor provider views (#554 / @arturi)</li><li>Lots of documentation fixes, thanks to all our contributors!</li></ul><h2 id="Press"><a href="#Press" class="headerlink" title="Press"></a>Press</h2><p>Uppy has made some appearances on the internet recently.</p><p>1. <strong><a href="https://twin.github.io/better-file-uploads-with-shrine-direct-uploads" target="_blank" rel="noopener">Better File Uploads with Shrine: Direct Uploads</a></strong>:</p><p>On how to set up Uppy with <a href="http://shrinerb.com/" target="_blank" rel="noopener">Shrine</a>, a file attachment toolkit for Ruby applications. It starts off with an example of a plain <code>&lt;form&gt;</code> upload and builds up to a more advanced experience:</p><blockquote><ul><li>When the user submits the form with selected files, there is no indicator telling them when the upload will finish.</li><li>When the user is uploading multiple files at once and the request happens to get aborted, it’s not possible to keep the files that were uploaded so far, because all files are sent in a single request. In other words, multiple uploads are all-or-nothing.</li><li>Files are validated only after they have been uploaded, which means the user needs to wait until the upload finishes before they can know whether their file was even valid.</li></ul><p>We can improve that by asynchronously starting to upload files on the client side as soon as they’re selected. This also gives users the ability to continue filling in other fields while files are being uploaded, because the UI isn’t blocked during the upload.</p><p>There are many popular JavaScript file upload libraries out there – jQuery-File-Upload, Dropzone.js, FineUploader etc. – but the one you should use with Shrine is definitely Uppy 🐶. Uppy is a modular library that knows how to upload files to a custom endpoint on your app, to Amazon S3, or even to a resumable endpoint, providing progress bars, drag &amp; drop functionality, image previews, file validations etc, all while making as few assumptions as possible.</p></blockquote><p>2. <strong>Featured <a href="https://twitter.com/JavaScriptDaily/status/950348390268919809" target="_blank" rel="noopener">in Javascript Daily</a></strong>:</p><blockquote><p>Uppy: A Powerful, Modular JavaScript File Uploader<br><cite>— JavaScript Daily</cite></p></blockquote><p>3. <strong><a href="https://twitter.com/uppy_io/status/946485101541683201" target="_blank" rel="noopener">#1 Trending on GitHub</a> accross all languages</strong>:</p><blockquote><p>Today our open source efforts are outpacing those of MSFT GOOG FB combined :D<br><cite>— kvz, transloadit</cite></p></blockquote><p>4. <strong><a href="https://www.producthunt.com/posts/uppy-io" target="_blank" rel="noopener">#2 Product of the Week</a> on ProductHunt</strong>:</p><blockquote><p>You literally solved my biggest problem, thank you for developing such a great project.<br><cite>— Chetan Menaria</cite></p><p>Writing file upload functionality is always a pain in the arse. I’ll be checking this out today and integrating into SongBox if it’s good.<br><cite>— Mick</cite></p></blockquote><p>5. <strong><a href="https://stackshare.io/posts/top-developer-tools-2017" target="_blank" rel="noopener">#2 New Tool of The Year</a> on Stackshare</strong>:</p><blockquote><p>Uppy closed out the year as the #1 trending GitHub JavaScript project, so we think it’s only getting started.</p></blockquote><h2 id="Full-Changelog"><a href="#Full-Changelog" class="headerlink" title="Full Changelog"></a>Full Changelog</h2><p>Here is the full list of changes for version <code>0.23.0</code> (and patches <code>0.22.1</code>—<code>0.22.5</code>):</p><ul><li>core: Allow plugins to add data to result object. Return <code>processing</code> results among with <code>upload</code> results in <code>complete</code> event and <code>upload()</code> promise (#527 / @goto-bus-stop)</li><li>core: Move limiting to different point, to fix StatusBar and other UI issues #468 (#524, #526 / @goto-bus-stop)</li><li>core: Add uploadID to complete event (#569 / @richardwillars)</li><li>core: Allow chanining after .on() and .off() to improve ergonomics (#597 / @arturi)</li><li>core: Allow user to override sass variables (#555 / @chao)</li><li>core: Move preview generation to separate plugin, add queuing (#431 / @richardwillars)</li><li>core: Third-party extension, uppy-store-ngrx <a href="https://github.com/rimlin/uppy-store-ngrx/" target="_blank" rel="noopener">https://github.com/rimlin/uppy-store-ngrx/</a> (#532 / @rimlin)</li><li>core: Warn, not error, when file cannot be added due to restrictions? (#604, #492 / @goto-bus-stop)</li><li>dashboard: Add more i18n strings (#565 / @arturi)</li><li>dashboard: Fix modal and page scroll (#564 / @arturi)</li><li>dashboard: Refactor provider views (#554 / @arturi)</li><li>dashboard: Restore focus after modal has been closed (#536 / @arturi)</li><li>dashboard: Use empty input value so same file can be selected multiple times (@arturi / #534)</li><li>dashboard: Use more accessible tip lib microtip (#536 / @arturi)</li><li>docs: Add PHP snippets to XHRUpload docs (#567 / @goto-bus-stop)</li><li>meta: Added instruction to fork the repo first (#512 / muhammadInam)</li><li>meta: Automatically host releases on edgly and use that as our main CDN (#558 / @kvz)</li><li>meta: Dependency version updates (#523 / @goto-bus-stop)</li><li>meta: Remove unused files from published package (#586 / @goto-bus-stop)</li><li>s3: Respect <code>limit</code> option for upload parameter requests too; fix isXml() check when no content-type is available (#545, #544, #528 / @goto-bus-stop)</li><li>statusbar: Fix status text still showing when statusbar is hidden (#525 / @goto-bus-stop)</li><li>test: Alter jest testPathPattern to current dir, add chai (#583 / @arturi)</li><li>thumbnail: Add thumbnail generation plugin (#461 / @richardwillars)</li><li>thumbnail: Fix blank preview thumbnails for images in Safari; use slightly different stap scaling (#458, #584 / @arturi)</li><li>transloadit: Add <code>transloadit:assembly-executing</code> event (#547 / @goto-bus-stop)</li><li>transloadit: Add assembly results to to the <code>complete</code> callback (#527 / @goto-bus-stop)</li><li>transloadit: Easily pass form fields (#593 / @goto-bus-stop)</li><li>tus: <code>resume: false</code> — don’t store url (@arturi / #507)</li><li>uppy-server: Detect file upload size from the server (@ifedapoolarewaju)</li><li>uppy-server: Fix circular json stringify error (@ifedapoolarewaju)</li><li>uppy-server: Load standalone server options via config path (@ifedapoolarewaju)</li><li>uppy-server: Pass response from uppy-server upload’s endpoint (#591 / @ifedapoolarewaju)</li><li>uppy-server: Schedule job to delete stale upload files (@ifedapoolarewaju)</li><li>uppy-server: Security audit, ask @acconut</li><li>uppy-server: Support localhost urls as endpoints (@ifedapoolarewaju)</li><li>url: New plugin that imports files from urls (#588 / @arturi, @ifedapoolarewaju)</li><li>webcam: Font styling for Webcam option (#509 / @muhammadInam)</li><li>webcam: Mirror image preview, add option to select which camera is used to capture, try filling the whole Dashboard with webcam preview image, remove URL.createObjectURL() (#574 / @arturi, @nqst)</li><li>website: Add Transloadit example to website (#603 / @arturi)</li><li>website: Doc fixes (#563 / @arturi)</li><li>website: Improve the Contributing guide (#578 / @arturi)</li><li>xhrupload: Add bundle option to send multiple files in one request (#442 / @goto-bus-stop)</li><li>xhrupload: Prevent files from being uploaded multiple times in separate uploads (#552 / @richardwillars)</li><li>xhrupload: Refactor response and error handling (#591 / @goto-bus-stop, @arturi, @ifedapoolarewaju)</li><li>core: Fix remote uploads (#474 / @arturi)</li><li>statusbar, progressbar: Add option to hide progress bar after upload finish (#485 / @wilkoklak)</li><li>s3: Allow passing on XHRUpload options, such as “limit” to AwsS3 Plugin (#471 / @ogtfaber)</li><li>XHRUpload: Fix progress with <code>limit</code>ed XHRUploads (#505 / @goto-bus-stop)</li><li>core: fix error when <code>file.type === null</code>, shouldn’t pass that to match (@arturi)</li><li>dashboard: input hidden=”true” should not be focusable too (@arturi)</li><li>webcam: Font styling for Webcam option (#509 / @muhammadInam)</li><li>docs: fix reference to incorrect width/height options (#475 / @xhocquet)</li><li>docs: Documentation fixes and improvements (#463 / @janko-m)</li><li>docs: Fixed several typos in docs/server and docs/uppy (#484 / @martiuslim)</li></ul><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi all! We are back from holidays with a shiny new &lt;code&gt;0.23.0&lt;/code&gt; release for you! It’s packed with a new &lt;code&gt;Url&lt;/code&gt; plugin (imports files from urls), refactored &lt;code&gt;ThumbnailGenerator&lt;/code&gt;, &lt;code&gt;Webcam&lt;/code&gt; improvements and more.&lt;/p&gt;
&lt;h2 id=&quot;Import-from-Url&quot;&gt;&lt;a href=&quot;#Import-from-Url&quot; class=&quot;headerlink&quot; title=&quot;Import from Url&quot;&gt;&lt;/a&gt;Import from Url&lt;/h2&gt;&lt;p&gt;Meet our new “Provider” plugin, &lt;code&gt;Url&lt;/code&gt;. It’s simple, yet powerful: paste a link to any file on the web, and Uppy with Uppy Server will upload it wherever you need.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;uppy.use(Url, { target: Dashboard, host: YOUR_UPPY_SERVER_URL })
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&quot;wide&quot;&gt;&lt;video alt=&quot;Demo video showing Uppy with Url plugin that imports files from urls&quot; controls autoplay&gt;&lt;source src=&quot;/images/blog/0.23/uppy-url-demo.mp4&quot; type=&quot;video/mp4&quot;&gt;Your browser does not support the video tag, you can &lt;a href=&quot;/images/blog/0.23/uppy-url-demo.mp4&quot;&gt;download the video&lt;/a&gt; to watch it.&lt;/video&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.22: Preact, Form, Improved Dashboard, Custom Stores</title>
    <link href="https://uppy.io/blog/2017/12/0.22/"/>
    <id>https://uppy.io/blog/2017/12/0.22/</id>
    <published>2017-12-23T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.469Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Uppy is <a href="https://www.producthunt.com/posts/uppy-io" target="_blank" rel="noopener">featured on Product Hunt</a>! To our fellow hunters: welcome! Quick intro: Uppy is the next open source file uploader for web browsers. We’re very close to launching 1.0 and would love to get your feedback in, leave your thoughts on Product Hunt or start a discussion below.</strong></p><p>Hi all! It’s New Year and Christmas time, and this year Santa is brining you Uppy <code>0.22</code> 🎁 This release packs a lot of neat stuff, but it also breaks things in quite a few places, so please read on.</p><p>And, if you are celebrating, happy holidays from the Uppy Team! 🎄</p><a id="more"></a><h2 id="Preact-and-JSX"><a href="#Preact-and-JSX" class="headerlink" title="Preact and JSX"></a>Preact and JSX</h2><p>We’ve been happy using <code>yo-yo</code> and <code>hyperx</code> template strings in our views for quite a while, but decided to try something more stable. Preact has most of the great ideas of React, plus smaller file size as well as a few good ideas of its own.</p><p>All views have been refactored to utilize JSX. We actually liked hyperx a lot, but JSX has better tooling and syntax highlighting support. It also seems to be the standard in the React community.</p><p>See <a href="https://github.com/transloadit/uppy/pull/451" target="_blank" rel="noopener">#451 PR</a> for details on why we switched and discussion around the process.</p><h2 id="Core-and-plugins-refactor"><a href="#Core-and-plugins-refactor" class="headerlink" title="Core and plugins refactor"></a>Core and plugins refactor</h2><ul><li><strong>⚠️ Breaking</strong> We’ve renamed the <code>core</code> object to <code>uppy</code> in plugins. So instead of <code>this.core.state</code> we now use <code>this.uppy.state</code>.</li><li><strong>⚠️ Breaking</strong> Events have been renamed to remove the <code>core:</code> prefix. So <code>core:success</code> becomes just <code>success</code>, and this also results in now having <code>error</code>, <code>upload-started</code> and so on. Prefixed event names are used for plugin-specific event sometimes, like <code>dashboard:file-card</code>.</li><li><strong>⚠️ Breaking</strong> CSS class names have been altered to use the <code>uppy-</code> namespace, so <code>.UppyDashboard-files</code> becomes <code>.uppy-Dashboard-files</code> and so on.</li><li><strong>⚠️ Breaking</strong> <code>getMetaFromForm</code> was removed in favor of the new <code>Form</code> plugin (see below).</li><li><strong>⚠️ Breaking</strong> <code>MetaData</code> plugin was removed in favor of the <code>metaFields</code> option in Dashboard, <a href="https://uppy.io/docs/dashboard/#metaFields">see docs</a> for more details.</li><li>Plugins now use <code>this.el</code> to refer to their UI element instead of <code>this.target</code>.</li><li><code>setPluginState</code> and <code>getPluginState</code> are now used in Providers.</li></ul><h2 id="Refreshed-Dashboard-UI"><a href="#Refreshed-Dashboard-UI" class="headerlink" title="Refreshed Dashboard UI"></a>Refreshed Dashboard UI</h2><p><img src="/images/blog/0.22/uppy-dashboard-updated.jpg" alt="Uppy Dashboard UI with 3 files selected"></p><ul><li>File cards are simpler, we’ve removed the excess white backgrounds, improved the remove icon, reduced paddings, added slight shadows.</li><li>Cicular upload button in the Dashboard has been moved to the StatusBar. It’s also not circular anymore, and there’s no cloud icon. Plain and simple.</li><li>Redesigned “retry” and “add +1 file” buttons.</li><li>Added <code>metaFields</code> option: an array of settings for UI field objects, which previousely lived in a separate <code>MetaData</code> plugin: <code>{ id: &#39;caption&#39;, name: &#39;Caption&#39;, placeholder: &#39;describe what the image is about&#39; }</code>, <a href="https://uppy.io/docs/dashboard/#metaFields">see docs</a> for more details.</li></ul><p>See <a href="https://github.com/transloadit/uppy/pull/451" target="_blank" rel="noopener">#434 PR</a> for more screenshots and details.</p><h2 id="Select-multiple-files-in-providers"><a href="#Select-multiple-files-in-providers" class="headerlink" title="Select multiple files in providers"></a>Select multiple files in providers</h2><p>Thanks to <a href="https://github.com/sadovnychyi" target="_blank" rel="noopener">@sadovnychyi</a>, you can now select multiple files from remote providers like Google Drive and Instagram. You can also select folders, and even range of files by holding <code>shift</code> key when clicking on first and last item in range.</p><p><img src="/images/blog/0.22/uppy-dashboard-provider-select.jpg" alt="Uppy Dashboard UI with 3 files selected"></p><p><a href="https://uppy.io/examples/dashboard/">Check it out →</a></p><h2 id="Stores"><a href="#Stores" class="headerlink" title="Stores"></a>Stores</h2><p>As you know, internally Uppy uses its own simple state management system with <code>getState</code> and <code>setState</code> methods. In previous releases we’ve added support for Redux via a plugin called <code>Redux</code>, which mirrors all Uppy state to your Redux application’s state, and a plugin called <code>ReduxDevTools</code> that connects to Redux DevTools and enables all the cool time traveling stuff.</p><p>We are excited to tell you that this release makes state management even more flexible by bringing support for external stores! Here’s a quote from the docs:</p><blockquote><p>By default, Uppy stores its internal state in an object.</p><p>If your app uses a state management library such as Redux, it can be useful to have Uppy store its state there instead—that way, you could write custom uploader UI components in the same way as the other components in the application.</p></blockquote><p>Here’s how that works:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'redux'</span><span class="token punctuation">)</span><span class="token keyword">const</span> ReduxStore <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uppy/lib/store/ReduxStore'</span><span class="token punctuation">)</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token operator">...</span>reducers<span class="token punctuation">,</span>  uppy<span class="token punctuation">:</span> ReduxStore<span class="token punctuation">.</span>reducer<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token keyword">const</span> uppy <span class="token operator">=</span> <span class="token function">Uppy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  store<span class="token punctuation">:</span> <span class="token function">ReduxStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    store<span class="token punctuation">:</span> store <span class="token comment">// That's a lot of stores!</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">...</span></pre></td></tr></table></figure><p>Now Uppy will use your app’s Redux store instead of its own, so you have a “single source of truth” 🔮</p><p>Read <a href="https://uppy.io/docs/stores/">more on stores</a> in docs.</p><h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><p><code>Form</code> is a new plugin that can be used in conjunction with any other. Here’s what it does: </p><ol><li>Acquires metadata from a <code>&lt;form&gt;</code> element of your choosing before the upload starts in Uppy.</li><li>Injects result array of succesful and failed files back into the form.</li></ol><p><strong>⚠️ Breaking</strong> With this plugin we’ve deprecated <code>getMetaFromForm</code> option that used to be in all acquire plugins like Dashboard and DragDrop. Now you can just use <code>Form</code>.</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Form<span class="token punctuation">,</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span> <span class="token string">'#my-form'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>Read <a href="https://uppy.io/docs/form/">more about the Form plugin</a> in docs.</p><h2 id="Encoding-support-in-GoldenRetriever"><a href="#Encoding-support-in-GoldenRetriever" class="headerlink" title="Encoding support in GoldenRetriever"></a>Encoding support in GoldenRetriever</h2><p>Our browser crash / page refresh restore plugin <code>GoldenRetriever</code> (read <a href="https://uppy.io/docs/golden-retriever/">more about it</a>) now supports correctly restoring <a href="https://transloadit.com" target="_blank" rel="noopener">Transloadit</a> assemblies!</p><p>Also, we’ve fixed restoring from paused state. Now uploads will remain paused and not get out of sync.</p><h2 id="Type-safe-Server"><a href="#Type-safe-Server" class="headerlink" title="Type-safe Server"></a>Type-safe Server</h2><p>Uppy Server now uses TypeScript to do some type checking at compile time. This helps spot some otherwise easy to miss runtime bugs. While the project’s source is still written in JavaScript, the use of <a href="https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files" target="_blank" rel="noopener">JSDoc specifications is leveraged by TypeScript</a> to detect data types and mistakes with that, within the project.</p><p>Thanks to this approach a number of hidden bugs have already been identified and fixed, and it also makes Uppy Server very well documented. :)</p><h2 id="And-there’s-more"><a href="#And-there’s-more" class="headerlink" title="And there’s more"></a>And there’s more</h2><ul><li>New <code>setFileState</code> method as a nice shorthand to update file-specific state.</li><li>Added more extensions for mimetype detection.</li><li>More plugin documentation 👍</li><li>Misc bugs fixes and improvements in Webcam, Dashboard, Provider, so things should be more stable all around.</li><li>Added an option to limit simultaneous uploads in XHRUpload.</li><li>Fixed remote server error handler for uppy-server.</li><li>Added <a href="https://snyk.io/" target="_blank" rel="noopener">Snyk</a> to uppy-server to aid vulnerability detection.</li></ul><h2 id="Full-Changelog"><a href="#Full-Changelog" class="headerlink" title="Full Changelog"></a>Full Changelog</h2><p><a id="changelog-toggle" href="javascript:document.getElementById('changelog').style.display = 'block'; document.getElementById('changelog-toggle').style.display = 'none'; false;" target="_blank" rel="noopener">&raquo; show</a></p><div id="changelog" style="display: none;" markdown="1"><br>Here is the full list of changes for version <code>0.22.0</code> (and patch <code>0.21.1</code>):<br><br>- <strong>⚠️ Breaking</strong> core: rendering engine switched from <code>Yo-Yo</code> to <code>Preact</code>, and all views from <code>html</code> hyperx template strings to <code>JSX</code> (#451 / @arturi)<br>- <strong>⚠️ Breaking</strong> core: large refactor of Core and Plugins: <code>setFileState</code>, merge <code>MetaData</code> plugin into <code>Dashboard</code>, prefix “private” core methods with underscores (@arturi / #438)<br>- <strong>⚠️ Breaking</strong> core: renamed <code>core</code> to <code>uppy</code> in plugins and what not. So instead of <code>this.core.state</code> we now use <code>this.uppy.state</code> (#438 / @arturi)<br>- <strong>⚠️ Breaking</strong> core: renamed events to remove <code>core:</code> prefix, as been suggested already. So: <code>success</code>, <code>error</code>, <code>upload-started</code> and so on, and prefixed event names for plugins sometimes, like <code>dashboard:file-card</code> (#438 / @arturi)<br>- <strong>⚠️ Breaking</strong> core: CSS class names have been altered to use <code>uppy-</code> namespace, so <code>.UppyDashboard-files</code> –&gt; <code>.uppy-Dashboard-files</code> and so on<br>- <strong>⚠️ Breaking</strong> dashboard: added <code>metaFields</code> option, pass an array of settings for UI field objects <code>{ id: &#39;caption&#39;, name: &#39;Caption&#39;, placeholder: &#39;describe what the image is about&#39; }</code> (#438 / @arturi, @goto-bus-stop)<br>- <strong>⚠️ Breaking</strong> core: deprecate <code>getMetaFromForm</code> in favor of new <code>Form</code> plugin (#407 / @arturi)<br>- form: added <code>Form</code>, a new plugin that is used in conjunction with any acquirer, responsible for: 1. acquiring the metadata from <code>&lt;form&gt;</code> when upload starts in Uppy; 2. injecting result array of succesful and failed files back into the form (#407 / @arturi)<br>- core: add more extensions for mimetype detection (#452 / @ifedapoolarewaju)<br>- docs: more docs for plugins (#456 / @goto-bus-stop)<br>- core: misc bugs fixes and improvements in Webcam, Dashboard, Provider and others (#451 / @arturi)<br>- dashboard: improved Dashboard UI (@arturi)<br>- uppy-server: remove pause/resume socket listeners when upload is done (@ifedapoolarewaju)<br>- uppy/uppy-server: remote server error handler (#446 / @ifedapoolarewaju)<br>- provider: fix dropbox thumbnail view (@ifedapoolarewaju)<br>- uppy-server: link uppy-server with <a href="https://snyk.io/" target="_blank" rel="noopener">https://snyk.io/</a> to aid vulnerability spotting (@ifedapoolarewaju)<br>- <strong>⚠️ Breaking</strong> core: Set <code>this.el</code> in <code>Plugin</code> class (#425 / @arturi)<br>- StatusBar, Dashboard and Provider UI improvements place upload button into StatusBar, use Alex’s suggestions for retry button; other UI tweaks (#434 / @arturi)<br>- XHRUpload: fix fields in XHR remote uploader (#424 / @sadovnychyi)<br>- XHRUpload: option to limit simultaneous uploads #360 (#427 / goto-bus-stop)<br>- core: Add <code>isSupported()</code> API for providers (#421 / @goto-bus-stop, @arturi)<br>- core: Add stores. Improve on Redux PR #216 to allow using Redux (or any other solution) for all Uppy state management, instead of proxy-only (#426 / @goto-bus-stop)<br>- core: add ability to disable thumbnail generation (#432 / @richardwillars)<br>- core: allow to select multiple files at once from remote providers (#419 / @sadovnychyi)<br>- core: use <code>setPluginState</code> and <code>getPluginState</code> in Providers (#436 / @arturi)<br>- docs: uppy-server docs for s3 <code>getKey</code> option (#444 / @goto-bus-stop)<br>- goldenretriever: Fix IndexedDB store initialisation when not cleaning up (#430 / @goto-bus-stop)<br>- provider: folder deselection did not remove all files (#439 / @ifedapoolarewaju)<br>- s3: Use Translator for localised strings (420 / @goto-bus-stop )<br>- transloadit: Port old tests from tape (#428 / @goto-bus-stop)<br>- tus: Restore correctly from paused state (#443 / @goto-bus-stop)<br>- uppy-server: use typescript to compile code for a type safe servers (@ifedapoolarewaju)<br><br></div><p>We expect our 1.0 release early next year. Want to impact it? Comment below, in <a href="https://github.com/transloadit/uppy/issues" target="_blank" rel="noopener">GitHub issues</a>, or on <a href="https://www.producthunt.com/posts/uppy-io" target="_blank" rel="noopener">Product Hunt</a>.</p><p>Happy Holidays,</p><p>The Uppy Team</p><center><br>  <iframe src="https://ghbtns.com/github-btn.html?user=transloadit&repo=uppy&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20"></iframe><br></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Uppy is &lt;a href=&quot;https://www.producthunt.com/posts/uppy-io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;featured on Product Hunt&lt;/a&gt;! To our fellow hunters: welcome! Quick intro: Uppy is the next open source file uploader for web browsers. We’re very close to launching 1.0 and would love to get your feedback in, leave your thoughts on Product Hunt or start a discussion below.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hi all! It’s New Year and Christmas time, and this year Santa is brining you Uppy &lt;code&gt;0.22&lt;/code&gt; 🎁 This release packs a lot of neat stuff, but it also breaks things in quite a few places, so please read on.&lt;/p&gt;
&lt;p&gt;And, if you are celebrating, happy holidays from the Uppy Team! 🎄&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.21: End to End Tests, Accessibility, Additional Security for Uppy Server</title>
    <link href="https://uppy.io/blog/2017/11/0.21/"/>
    <id>https://uppy.io/blog/2017/11/0.21/</id>
    <published>2017-11-24T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.469Z</updated>
    
    <content type="html"><![CDATA[<p>Hi all! We’ve been busy with Halloween, but also another release, so here is Uppy <code>0.21</code>! This one improves accessibility, features new end-to-end tests and improved security in Uppy Server.</p><a id="more"></a><h2 id="Accessibility"><a href="#Accessibility" class="headerlink" title="Accessibility"></a>Accessibility</h2><p>One of the goals we’ve set out to achieve with Uppy was to make an accessibe file upload widget, and in this release we’ve achieved some more progress in this area:</p><ul><li>Dashboard modal dialog now handles focus better (it’s trapped inside the modal while open);</li><li>First button is in focus right after the modal dialog is open;</li><li>More (aria-)labels have been added;</li><li>Files from remote providers are now selectable with a keyboard.</li></ul><p>We plan to continue gradually improving in the accessibility area.</p><p>See <a href="https://github.com/transloadit/uppy/pull/414" target="_blank" rel="noopener">#414 PR</a> for details.</p><h2 id="Returning-successful-failed-from-uppy-upload"><a href="#Returning-successful-failed-from-uppy-upload" class="headerlink" title="Returning { successful, failed } from uppy.upload()"></a>Returning <code>{ successful, failed }</code> from <code>uppy.upload()</code></h2><p><strong>⚠️ Breaking change</strong></p><p><code>uppy.upload()</code> promise now resolves to a <code>result</code> object with two arrays of files: <code>{ successful, failed }</code>. This lets you handle succesful and failed uploads in one go:  </p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'Successful uploads:'</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>successful<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>failed<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Errors:'</span><span class="token punctuation">)</span>    result<span class="token punctuation">.</span>failed<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// or</span>uppy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'core:complete'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> successful<span class="token punctuation">,</span> failed <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'UPLOAD SUCCESSFUL!!!'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'UPLOAD FAILED!!!'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'successful files:'</span><span class="token punctuation">,</span> successful<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'failed files:'</span><span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>See <a href="https://uppy.io/docs/uppy/#uppy-upload"><code>uppy.upload()</code></a> and <a href="https://uppy.io/docs/uppy/#core-complete"><code>core:complete</code></a> in docs, as well as <a href="https://github.com/transloadit/uppy/pull/404" target="_blank" rel="noopener">#404 PR</a> for more details.</p><h2 id="End-to-end-tests"><a href="#End-to-end-tests" class="headerlink" title="End to end tests"></a>End to end tests</h2><p>We’ve refactored end to end tests to use <a href="http://webdriver.io" target="_blank" rel="noopener">Webdriver.io</a>, and for the occasion added tests for Edge, Safari, Android and iOS. Now tests on Travis and Sauce Labs (thanks for the open source tier!) run smoothly and it’s easier to alter them or write new ones.</p><h2 id="More-secure-Uppy-Server"><a href="#More-secure-Uppy-Server" class="headerlink" title="More secure Uppy Server"></a>More secure Uppy Server</h2><p>We made sure access tokens from third-party providers, such as Google Drive or Instagram, are not stored on the server with Uppy Server, and kept in your browser instead. Then, when you want to pick a file from your Instagram, the token is used to make a request. Even though they live on the browser, these tokens are encrypted with JWT on the server side, before they are being sent to the client. So they can only be decrypted and understood on the server side.</p><p>Data validation is also now done during intiation of an upload, to prevent corrupt data from triggering funny behaviours on the server. :)</p><p>And, while we were at this, we also made sure all sensitive data is masked in request logs.</p><h2 id="Migration-to-Dropbox-v2-API"><a href="#Migration-to-Dropbox-v2-API" class="headerlink" title="Migration to Dropbox v2 API"></a>Migration to Dropbox v2 API</h2><p>Since the <a href="https://blogs.dropbox.com/developers/2017/09/api-v1-shutdown-details/" target="_blank" rel="noopener">deprecation of Dropbox v1 API</a>, uppy/uppy-server have now been updated to use the v2 API. It is implemented to work closely as its previous implementation so there should be no worries.</p><h2 id="Custom-plugin-id"><a href="#Custom-plugin-id" class="headerlink" title="Custom plugin id"></a>Custom plugin id</h2><p>Up until now you could only use a plugin once with an Uppy instance. Now you can pass custom <code>id</code> for any plugin (though this has to be manually implemented in any new plugin). This allows using, for example, two <code>StatusBar</code>s, one inside the <code>Dashboard</code>, and one somewhere on the page, visible even when <code>Dashboard</code> is closed.</p><p>Can be used like this:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token comment">// one StatusBar comes included in the Dashboard, another will be mounted on the page</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Dashboard <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>StatusBar<span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">'PageStatusBar'</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token string">'body'</span> <span class="token punctuation">}</span></pre></td></tr></table></figure><p>See <a href="https://github.com/transloadit/uppy/pull/418" target="_blank" rel="noopener">#418 PR</a> for details.</p><h2 id="Misc-good-stuff"><a href="#Misc-good-stuff" class="headerlink" title="Misc good stuff"></a>Misc good stuff</h2><ul><li>Migrated Dropbox in Uppy Server to use v2 API.</li><li>Fixed generating thumbnails for images with transparent background.</li><li>We are now using <a href="https://github.com/goto-bus-stop/tinyify" target="_blank" rel="noopener"><code>tinyify</code></a>(by our own <a href="https://github.com/goto-bus-stop" target="_blank" rel="noopener">@goto-bus-stop</a>) for the Uppy bundle to make it smaller and more efficient.</li><li>Instead of restarting only the file upload itself, start an entirely new upload for retries. Fixes retrying uploads with processing plugins.</li><li>The S3 plugin now includes XHRUpload. <strong>⚠️ Breaking change: you should remove <code>.use(XHRUpload)</code> when using S3.</strong></li><li>XHRUpload now includes a timeout <code>opts.timeout = 30000</code>, after which it errors and offers a retry (retry UI supported in Dashboard), see <a href="https://github.com/transloadit/uppy/pull/378" target="_blank" rel="noopener">#378</a> for more.</li><li>Renamed <code>RestoreFiles</code> → <code>GoldenRetriever</code>, and <code>Tus10</code> → <code>Tus</code>. <strong>⚠️ Breaking change: please make sure to use the new names when setting up plugins</strong>.</li><li>The Webcam plugin has been refactored. There’s no flash fallback now, it works in modern browsers only, and the Webcam tab won’t appear in the Dashboard if a camera is not supported on the device.</li></ul><h2 id="Full-Changelog"><a href="#Full-Changelog" class="headerlink" title="Full Changelog"></a>Full Changelog</h2><p>Here is the full list of changes for version <code>0.21.0</code> (and patches <code>0.20.1</code>, <code>0.20.2</code>, <code>0.20.3</code>):</p><ul><li>accessibility: add tabindex=”0” to buttons and tabs, aria-labels, focus (#414 / @arturi)</li><li>core: allow setting custom <code>id</code> for plugins to allow a plugin to be used multiple times (#418 / @arturi)</li><li>core: do not check isPreviewSupported for unknown filetypes (#417 / @sadovnychyi)</li><li>core: refactor <code>uppy-base</code> (#382 / @goto-bus-stop)</li><li>core: remove functions from state object (#408 / @goto-bus-stop)</li><li>core: return <code>{ successful, failed }</code> from <code>uppy.upload()</code> (#404 / @goto-bus-stop)</li><li>core: update state with error messages rather than error objects (#406 / @richardwillars)</li><li>core: use <code>tinyify</code> for the unpkg bundle. (#371 / @goto-bus-stop)</li><li>dashboard: Fix pasting files, default <code>image</code> file name, add type to meta, file type refactor (#395 / @arturi)</li><li>dragdrop: Fix of the .uppy-DragDrop-inner spacing on small screens (#405 / @nqst)</li><li>react: fix <code>uppy</code> PropType, closes (#416 / @goto-bus-stop)</li><li>s3: automatically wrap XHRUpload. Users should remove <code>.use(XHRUpload)</code> when using S3. (#408 / @goto-bus-stop)</li><li>test: refactored end-to-end tests to not use website, switched to Webdriver.io, added tests for Edge, Safari, Android and iOS (#410 / @arturi)</li><li>tus: Rename Tus10 → Tus (#285 / @goto-bus-stop)</li><li>uppy-serer: mask sensitive data from request logs (@ifedapoolarewaju)</li><li>uppy-server: add request body validators (@ifedapoolarewaju)</li><li>uppy-server: migrate dropbox to use v2 API (#386 / @ifedapoolarewaju)</li><li>uppy-server: store tokens in user’s browser only (@ifedapoolarewaju)</li><li>webcam: only show the webcam tab when browser support is available (media recorder API) (#421 / @arturi, @goto-bus-stop)</li><li>webcam: simplify and refactor webcam plugin (modern browser APIs only) (#382 / @goto-bus-stop)</li><li>xhrupload: set a timeout in the onprogress event handler to detect stale network (#378 / @goto-bus-stop)</li><li>uppy-server: allow flexible whitelist endpoint protocols (@ifedapoolarewaju)</li><li>core: Start a completely new upload when retrying. (#390 / @goto-bus-stop)</li><li>dashboard: Show errors that occurred during processing on the file items. (#391 / @goto-bus-stop)</li><li>transloadit: Mark files as having errored if their assembly fails. (#392 / @goto-bus-stop)</li><li>core: Clear file upload progress when an upload starts. (#393 / @goto-bus-stop)</li><li>tus: Clean up <code>tus.Upload</code> instance and events when an upload starts, finishes, or fails. (#390 / @goto-bus-stop)</li><li>docs: fix <code>getMetaFromForm</code> documentation (@arturi)</li><li>core: fix generating thumbnails for images with transparent background (#380 / @goto-bus-stop)</li><li>transloadit: use Translator class for localised strings (#383 / @goto-bus-stop)</li><li>goldenretriever: don’t crash when required server-side (#384 / @goto-bus-stop)</li><li>redux: add plugin for syncing uppy state with a Redux store (#376 / @richardwillars)</li></ul><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi all! We’ve been busy with Halloween, but also another release, so here is Uppy &lt;code&gt;0.21&lt;/code&gt;! This one improves accessibility, features new end-to-end tests and improved security in Uppy Server.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.20: React, Retry &amp; Time Travel</title>
    <link href="https://uppy.io/blog/2017/10/0.20/"/>
    <id>https://uppy.io/blog/2017/10/0.20/</id>
    <published>2017-10-05T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.469Z</updated>
    
    <content type="html"><![CDATA[<p>We are proud to present Uppy <code>0.20</code>. This one focuses on React and Redux support, adding storage expirations to <code>GoldenRetriever</code> and upload retries. Enjoy!</p><h2 id="Uppy-React-components"><a href="#Uppy-React-components" class="headerlink" title="Uppy React components"></a>Uppy React components</h2><p>Uppy now ships with React components! We’ve been exploring different approaches to React components for several months, so we’re excited to finally have them in ✨ There are components for each of Uppy’s UI elements, like the Dashboard and the StatusBar.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> uppy <span class="token operator">=</span> <span class="token function">Uppy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Tus10<span class="token punctuation">,</span> <span class="token punctuation">{</span> endpoint<span class="token punctuation">:</span> <span class="token string">'/upload'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">const</span> Dashboard <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uppy/lib/react/Dashboard'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">Uploader</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Dashboard    uppy<span class="token operator">=</span><span class="token punctuation">{</span>uppy<span class="token punctuation">}</span>    note<span class="token operator">=</span><span class="token string">"Hey! It's a React component!"</span>  <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Uploader <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#uploader'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><a id="more"></a><p><a href="/docs/react/">Check out the docs for more!</a></p><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p><a href="https://github.com/richardwillars" target="_blank" rel="noopener">@richardwillars</a> contributed a plugin that will sync Uppy’s internal state with an existing Redux store.<br>To use it, define a Redux action and reducer:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token comment">// The action creator receives 3 parameters:</span><span class="token comment">// - The previous state</span><span class="token comment">// - The new state</span><span class="token comment">// - The change set</span><span class="token keyword">const</span> <span class="token function-variable function">uppyStateUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>previous<span class="token punctuation">,</span> next<span class="token punctuation">,</span> patch<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">'UPPY_STATE_UPDATE'</span><span class="token punctuation">,</span>  previous<span class="token punctuation">,</span>  next<span class="token punctuation">,</span>  patch<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">reduce</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'UPPY_STATE_UPDATE'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>state<span class="token punctuation">,</span>      <span class="token comment">// Merge in the changes.</span>      <span class="token operator">...</span>action<span class="token punctuation">.</span>patch    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></pre></td></tr></table></figure><p>Then pass your Redux store’s <code>dispatch</code> function and the action creator to the Redux plugin:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> ReduxStore <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uppy/lib/Redux'</span><span class="token punctuation">)</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ReduxStore<span class="token punctuation">,</span> <span class="token punctuation">{</span>  dispatch<span class="token punctuation">:</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">,</span>  action<span class="token punctuation">:</span> uppyStateUpdate<span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><a href="/docs/react/redux-sync">See the docs</a></p><h2 id="Redux-DevTools"><a href="#Redux-DevTools" class="headerlink" title="Redux DevTools"></a>Redux DevTools</h2><p>Even if you’re not using Redux in your application, there’s some Redux-related news! Uppy now has a new plugin, <code>ReduxDevTools</code>, which adds debug support for Redux DevTools and allows you to time travel while debugging Uppy:</p><figure class="wide"><video alt="Demo video showing Uppy with Redux Dev Tools and time traveling" controls autoplay><source src="/images/blog/0.20/uppy-reduxdevtools.mp4" type="video/mp4">Your browser does not support the video tag, you can <a href="/images/blog/0.20/uppy-reduxdevtools.mp4">download the video</a> to watch it.</video></figure><p>To try it, add the plugin:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> ReduxDevTools <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uppy/lib/plugins/ReduxDevTools'</span><span class="token punctuation">)</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ReduxDevTools<span class="token punctuation">)</span></pre></td></tr></table></figure><p>And then <a href="https://github.com/zalmoxisus/redux-devtools-extension" target="_blank" rel="noopener">activate the browser extension</a>.</p><p>See <a href="https://github.com/transloadit/uppy/pull/373" target="_blank" rel="noopener">#373</a> for details and discussion.</p><h2 id="Retries"><a href="#Retries" class="headerlink" title="Retries"></a>Retries</h2><p>We’ve added a retry UI to the <code>Dashboard</code>. If some of your uploads fail—maybe the network is down or the endpoint is unresponsive—you’ll see this:</p><p><img alt="Uppy Dashboard retry UI with individual retry buttons and “retry all”" src="/images/blog/0.20/retry.jpg"></p><p>From here it’s easy to retry individual uploads or all at once. This feature currenty works best with <code>Tus10</code> plugin, and has basic <code>XHRUpload</code> support, but we’ll improve on the latter in the future releases.</p><h2 id="Re-designed-Drag-and-Drop-plugin"><a href="#Re-designed-Drag-and-Drop-plugin" class="headerlink" title="Re-designed Drag and Drop plugin"></a>Re-designed Drag and Drop plugin</h2><p>The old trustly <code>DragDrop</code> plugin has been re-designed by <a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a> and <a href="http://zaytsev.io" target="_blank" rel="noopener">@nqst</a>:</p><ul><li>Fresh simple design, arrow icon, white background;</li><li>New sizing options: <code>width</code> and <code>height</code> (both <code>100%</code> by default to fill the entire container space);</li><li>A <code>note</code> option, like in the <code>Dashboard</code>, to add info about restrictions or anything else you would like your users to know.</li></ul><p><img class="border" src="/images/blog/0.20/dnd-gray.jpg"></p><p><strong><a href="/examples/dragdrop/">Check it out</a></strong></p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>DragDrop<span class="token punctuation">,</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span> <span class="token string">'body'</span><span class="token punctuation">,</span>  width<span class="token punctuation">:</span> <span class="token string">'600px'</span><span class="token punctuation">,</span>  height<span class="token punctuation">:</span> <span class="token string">'300px'</span><span class="token punctuation">,</span>  note<span class="token punctuation">:</span> <span class="token string">'Videos only, up to 100 MB'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="The-Golden-Retriever-cleans-up-after-itself"><a href="#The-Golden-Retriever-cleans-up-after-itself" class="headerlink" title="The Golden Retriever cleans up after itself"></a>The Golden Retriever cleans up after itself</h2><p>We recently released the <code>GoldenRetriever</code> plugin, which stores selected files on the client so that it can recover them after a browser crash. Previously, these stored files would stay around forever, and clog up the user’s disk space. As of 0.20.0, files will be removed from client-side storage when they have been uploaded. Files that have had nothing happen to them for longer than 24 hours will be cleaned up automatically. This timeframe can be configured using the new <code>expires</code> option:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> ms <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ms'</span><span class="token punctuation">)</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>GoldenRetriever<span class="token punctuation">,</span> <span class="token punctuation">{</span>  expires<span class="token punctuation">:</span> <span class="token function">ms</span><span class="token punctuation">(</span><span class="token string">'4 hours'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>(The <a href="https://npmjs.com/package/ms" target="_blank" rel="noopener"><code>ms</code></a> module is great for converting text durations to milliseconds!)</p><p>This will clean up files when Uppy runs, but perhaps not every page of your app uses Uppy. If a user selected some files, but then never came back to that same page, files could still hang around for a long time. To aid this, there’s a new module that you can call to clean up Uppy’s cache without needing an Uppy instance:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">const</span> cleanup <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uppy/lib/plugins/GoldenRetriever/cleanup'</span><span class="token punctuation">)</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>We’ll hopefully make that require path easier to remember in the future :)</p><h2 id="Misc-good-stuff"><a href="#Misc-good-stuff" class="headerlink" title="Misc good stuff"></a>Misc good stuff</h2><ul><li>The GoldenRetriever now detects a serviceWorker registration automatically—it’s no longer necessary to emit an <code>core:sw-file-ready</code> event.</li><li>Request headers are now configurable in the AWS S3 plugin.</li><li>A new <code>setPluginState</code> allows plugins to set state scoped to the plugin.</li><li>Some unused code was removed 🎉</li><li>More tests were added! Thanks <a href="https://github.com/gavboulton" target="_blank" rel="noopener">@gavboulton</a> and <a href="https://github.com/richardwillars" target="_blank" rel="noopener">@richardwillars</a> 🎉</li><li>Documentation for the <a href="/docs/statusbar">StatusBar</a>, <a href="/docs/xhrupload">XHRUpload</a> and <a href="/docs/tus">Tus</a> plugins.</li></ul><h2 id="Full-Changelog"><a href="#Full-Changelog" class="headerlink" title="Full Changelog"></a>Full Changelog</h2><p>Here is the full list of changes for version <code>0.20.0</code> (and patch <code>0.19.1</code>):</p><ul><li>core: retry/error when upload can’t start or fails (offline, connection lost, wrong endpoint); add error in file progress state, UI, question mark button (#307 / @arturi)</li><li>core: support for retry in Tus plugin (#307 / @arturi)</li><li>core: support for retry in XHRUpload plugin (#307 / @arturi)</li><li>core: Add support for Redux DevTools via a plugin (#373 / @arturi)</li><li>core: improve and merge the React PR (#170 / @goto-bus-stop, @arturi)</li><li>core: improve core.log method, add timestamps (#372 / @arturi)</li><li>dragdrop: redesign, add note, width/height options, arrow icon (#374 / @arturi)</li><li>uploaders: upload resolution changes, followup to #323 (#347 / @goto-bus-stop)</li><li>uploaders: issue warning when no uploading plugins are used (#372 / @arturi)</li><li>core: fix <code>replaceTargetContent</code> and add tests for <code>Plugin</code> (#354 / @gavboulton)</li><li>goldenretriever: Omit completed uploads from saved file state—previously, when an upload was finished and the user refreshed the page, all the finished files would still be there because we saved the entire list of files. Changed this to only store files that are part of an in-progress upload, or that have yet to be uploaded (#358, #324 / @goto-bus-stop)</li><li>goldenretriever: Remove files from cache when upload finished—this uses the deleteBlobs function when core:success fires (#358, #324 / @goto-bus-stop)</li><li>goldenretriever: add a timestamp to cached blobs, and to delete old blobs on boot (#358, #324 / @goto-bus-stop)</li><li>s3: have some way to configure content-disposition for uploads, see #243 (@goto-bus-stop)</li><li>core: move <code>setPluginState</code> and add <code>getPluginState</code> to <code>Plugin</code> class (#363 / @goto-bus-stop)</li><li>goldenretriever: fix restorefiles with id (#351 / @arturi)</li><li>goldenretriever: Clean up blobs that are not related to a file in state (#349 / @goto-bus-stop)</li><li>core: set the newState before emiting <code>core:state-update</code> (#341 / @sunil-shrestha, @arturi)</li><li>docs: Document StatusBar plugin (#350 / @goto-bus-stop)</li></ul><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We are proud to present Uppy &lt;code&gt;0.20&lt;/code&gt;. This one focuses on React and Redux support, adding storage expirations to &lt;code&gt;GoldenRetriever&lt;/code&gt; and upload retries. Enjoy!&lt;/p&gt;
&lt;h2 id=&quot;Uppy-React-components&quot;&gt;&lt;a href=&quot;#Uppy-React-components&quot; class=&quot;headerlink&quot; title=&quot;Uppy React components&quot;&gt;&lt;/a&gt;Uppy React components&lt;/h2&gt;&lt;p&gt;Uppy now ships with React components! We’ve been exploring different approaches to React components for several months, so we’re excited to finally have them in ✨ There are components for each of Uppy’s UI elements, like the Dashboard and the StatusBar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;const uppy = Uppy()
uppy.use(Tus10, { endpoint: &amp;#39;/upload&amp;#39; })

const Dashboard = require(&amp;#39;uppy/lib/react/Dashboard&amp;#39;)
const Uploader = () =&amp;gt; (
  &amp;lt;Dashboard
    uppy={uppy}
    note=&amp;quot;Hey! It&amp;#39;s a React component!&amp;quot;
  /&amp;gt;
)

ReactDOM.render(&amp;lt;Uploader /&amp;gt;, document.querySelector(&amp;#39;#uploader&amp;#39;))
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.19: Tests, Informer details and better APIs</title>
    <link href="https://uppy.io/blog/2017/09/0.19/"/>
    <id>https://uppy.io/blog/2017/09/0.19/</id>
    <published>2017-09-21T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.469Z</updated>
    
    <content type="html"><![CDATA[<p>Hello! The <code>0.19</code> release is about internal fixes, optimizations and refactoring, as well as some work on PRs that we’ll hopefully tell you about soon!</p><h2 id="Jest-tests"><a href="#Jest-tests" class="headerlink" title="Jest tests"></a>Jest tests</h2><p>Thanks to our contributer, <a href="https://github.com/richardwillars" target="_blank" rel="noopener">@richardwillars</a>, and following the example set by Uppy Server, we’ve <a href="https://github.com/transloadit/uppy/pull/310" target="_blank" rel="noopener">switched to Jest</a> for Uppy’s unit tests, and added a bunch of new tests as well. And even more are being <a href="https://github.com/transloadit/uppy/pull/346" target="_blank" rel="noopener">added</a> as we speak!</p><p>We’re also happy to report that <a href="https://github.com/transloadit/uppy-server/compare/3341a9592d0723fd9b58ec77d8c762f20b434704...d3c6f5b409d08f588d1704b77181e5c0342ca322" target="_blank" rel="noopener">more tests</a> have been added for Uppy Server.</p><h2 id="Dashboard-APIs"><a href="#Dashboard-APIs" class="headerlink" title="Dashboard APIs"></a>Dashboard APIs</h2><p>We’ve exposed <code>show/hide/isOpen</code> APIs for the Dashboard UI plugin. Now you can open and close the modal dialog programmatically:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token keyword">var</span> modal <span class="token operator">=</span> uppy<span class="token punctuation">.</span><span class="token function">getPlugin</span><span class="token punctuation">(</span><span class="token string">'Dashboard'</span><span class="token punctuation">)</span>modal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>modal<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    modal<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    modal<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>Check out <a href="https://uppy.io/docs/dashboard/#Methods">the docs</a>.</p><a id="more"></a><h2 id="Transloadit"><a href="#Transloadit" class="headerlink" title="Transloadit"></a>Transloadit</h2><ul><li>Possibility to upload to S3, then import into an assembly;</li><li>New <code>alwaysRunAssembly</code> option has beed added to run assemblies when no files are uploaded.</li></ul><h2 id="Informer-details"><a href="#Informer-details" class="headerlink" title="Informer details"></a>Informer details</h2><p>Informer supports “explanations”, a questionmark (?) button that shows more info on hover / click.</p><p><img class="border" src="/images/blog/0.19/informer-details.jpg"></p><h2 id="Misc-good-stuff"><a href="#Misc-good-stuff" class="headerlink" title="Misc good stuff"></a>Misc good stuff</h2><ul><li>Uppy instance ID, useful for GoldenRetriver, check out <a href="https://github.com/transloadit/uppy/tree/master/examples/multiple-instances" target="_blank" rel="noopener">example using multiple Uppy instances</a>;</li><li>Custom error messages from upload endpoints are now supported (#305);</li><li>Fixed <code>calculateTotalProgress</code> and <code>restrictions</code>; improved <code>generateFileID</code> and <code>isOnline</code>;</li><li>Removed some unused css styles from the bundle;</li><li>Allow multiple <code>trigger</code> elements for the Dashboard, via using the same <code>class</code> attribute;</li><li>Image previews are now resized gradually for better performance and quality;</li><li>Metadata edits in the Dashboard are now saved when pressing enter key;</li></ul><h2 id="Full-Changelog"><a href="#Full-Changelog" class="headerlink" title="Full Changelog"></a>Full Changelog</h2><p>Here is the full list of changes for version <code>0.19</code> (and patch <code>0.18.1</code>):</p><ul><li>core: gradually resize image previews (#275 / @goto-bus-stop)</li><li>informer: support “explanations”, a (?) button that shows more info on hover / click (#292 / @arturi)</li><li>fix webcam video recording (@goto-bus-stop)</li><li>bundle: add missing plugins (s3, statusbar, restorefiles) to unpkg bundle (#301 / @goto-bus-stop)</li><li>xhrupload: Use error messages from the endpoint (#305 / @goto-bus-stop)</li><li>dashboard: prevent submitting outer form when pressing enter key while editing metadata (#306 / @goto-bus-stop)</li><li>dashboard: save metadata edits when pressing enter key (#308 / @arturi)</li><li>transloadit: upload to S3, then import into :tl: assembly using <code>/add_file?s3url=${url}</code> (#280 / @goto-bus-stop)</li><li>transloadit: add <code>alwaysRunAssembly</code> option to run assemblies when no files are uploaded (#290 / @goto-bus-stop)</li><li>core: use <code>iteratePlugins</code> inside <code>updateAll</code> (#312 / @richardwillars)</li><li>core: improve error when plugin does not have ID (#309 / @richardwillars)</li><li>tus: Clear stored <code>uploadUrl</code> on <code>uppy.resetProgress()</code> call (#314 / @goto-bus-stop)</li><li>website: simplify examples and code samples, prevent sidebar subheading links anywhere but in docs (@arturi)</li><li>website: group plugin docs together in the sidebar (@arturi)</li><li>goldenretriever: allow passing options to <code>IndexedDbStore</code> (#339 / sunil-shrestha)</li><li>core: add Uppy instance ID option, namespace serviceWorker action types, add example using multiple Uppy instances with GoldenRetriever (#333 / @goto-bus-stop)</li><li>core: fix <code>calculateTotalProgress</code> - NaN (#342 / @arturi)</li><li>core: fix and refactor <code>restrictions</code> (#345 / @arturi)</li><li>core: Better <code>generateFileID</code> (#330 / @arturi)</li><li>core: improve <code>isOnline()</code> (#319 / @richardwillars)</li><li>core: remove unused bootstrap styles (#329 / @arturi)</li><li>core: experiment with yo-yo –&gt; preact and picodom (#297 / @arturi)</li><li>dashboard: fix FileItem source icon position and copy (@arturi)</li><li>dashboard: expose and document the <code>show/hide/isOpen</code> API (@arturi)</li><li>dashboard: allow multiple <code>trigger</code> of the same class <code>.open-uppy</code> (#328 / @arturi)</li><li>plugins: add <code>aria-hidden</code> to all SVG icons for accessibility (#4e808ca3d26f06499c58bb77abbf1c3c2b510b4d / @arturi)</li><li>core: Handle sync returns and throws in possibly-async function options (#315 / @goto-bus-stop)</li><li>core: switch to Jest tests, add more tests for Core and Utils (#310 / @richardwillars)</li><li>website: Minify bundle for <code>disc</code> (#332 / @goto-bus-stop)</li><li>transloadit: remove <code>this.state</code> getter (#331 / @goto-bus-stop)</li><li>server: option to define valid upload urls (@ifedapoolarewaju)</li><li>server: more automated tests (@ifedapoolarewaju)</li></ul><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello! The &lt;code&gt;0.19&lt;/code&gt; release is about internal fixes, optimizations and refactoring, as well as some work on PRs that we’ll hopefully tell you about soon!&lt;/p&gt;
&lt;h2 id=&quot;Jest-tests&quot;&gt;&lt;a href=&quot;#Jest-tests&quot; class=&quot;headerlink&quot; title=&quot;Jest tests&quot;&gt;&lt;/a&gt;Jest tests&lt;/h2&gt;&lt;p&gt;Thanks to our contributer, &lt;a href=&quot;https://github.com/richardwillars&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@richardwillars&lt;/a&gt;, and following the example set by Uppy Server, we’ve &lt;a href=&quot;https://github.com/transloadit/uppy/pull/310&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;switched to Jest&lt;/a&gt; for Uppy’s unit tests, and added a bunch of new tests as well. And even more are being &lt;a href=&quot;https://github.com/transloadit/uppy/pull/346&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;added&lt;/a&gt; as we speak!&lt;/p&gt;
&lt;p&gt;We’re also happy to report that &lt;a href=&quot;https://github.com/transloadit/uppy-server/compare/3341a9592d0723fd9b58ec77d8c762f20b434704...d3c6f5b409d08f588d1704b77181e5c0342ca322&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;more tests&lt;/a&gt; have been added for Uppy Server.&lt;/p&gt;
&lt;h2 id=&quot;Dashboard-APIs&quot;&gt;&lt;a href=&quot;#Dashboard-APIs&quot; class=&quot;headerlink&quot; title=&quot;Dashboard APIs&quot;&gt;&lt;/a&gt;Dashboard APIs&lt;/h2&gt;&lt;p&gt;We’ve exposed &lt;code&gt;show/hide/isOpen&lt;/code&gt; APIs for the Dashboard UI plugin. Now you can open and close the modal dialog programmatically:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;var modal = uppy.getPlugin(&amp;#39;Dashboard&amp;#39;)
modal.show()

...

button.addEventListener(&amp;#39;click&amp;#39;, () =&amp;gt; {
  if (modal.isOpen()) {
    modal.hide()
  } else {
    modal.show()
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://uppy.io/docs/dashboard/#Methods&quot;&gt;the docs&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.18: Dogumentation and The GoldenRetriever</title>
    <link href="https://uppy.io/blog/2017/09/0.18/"/>
    <id>https://uppy.io/blog/2017/09/0.18/</id>
    <published>2017-09-15T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.469Z</updated>
    
    <content type="html"><![CDATA[<p>Hi! Another month — a new Uppy release 🎉</p><p><em>Note: current latest release is actually <code>0.19</code>, but this post got delayed, so we are publishing it first. <code>0.19</code> post is coming next.</em></p><h2 id="New-documentation"><a href="#New-documentation" class="headerlink" title="New documentation"></a>New documentation</h2><p>Documentation for Uppy has been re-written, and now features chapters on Uppy’s settings and API, using various plugins, and running Uppy Server. Check it out: <a href="https://uppy.io/docs/">https://uppy.io/docs/</a>. More chapters to come!</p><h2 id="The-GoldenRetriever"><a href="#The-GoldenRetriever" class="headerlink" title="The GoldenRetriever"></a>The GoldenRetriever</h2><p>The GoldenRetriever has been released as a public beta. For details, please refer to the previous post, <a href="https://uppy.io/blog/2017/07/golden-retriever/">The GoldenRetriever: Making uploads survive browser crashes</a>, but the gist is: when enabled, this plugin will save uppy-state to localStorage on every change, and then if your browser crashes, or you accidentaly navigate away from a tab,later when you return, your uploads will resume like nothing happened. Spoiler: it uses Service Workers and IndexedDB.</p><p><img class="border" src="/images/blog/0.18/golden-retriever.jpg"></p><a id="more"></a><h2 id="Multipart-uploader-is-now-XHRUpload"><a href="#Multipart-uploader-is-now-XHRUpload" class="headerlink" title="Multipart uploader is now XHRUpload"></a>Multipart uploader is now XHRUpload</h2><p><code>Multipart</code> has been replaced by a more flexible <code>XHRUpload</code>, so that other plugins, like <code>AwsS3</code>, can depend on it.</p><h2 id="AwsS3"><a href="#AwsS3" class="headerlink" title="AwsS3"></a>AwsS3</h2><p>The <code>AwsS3</code> plugin can be used to upload files directly to an S3 bucket.</p><p>As of now, the AwsS3 plugin “decorates” the <code>XHRUpload</code> plugin. To upload files directly to S3, both the <code>XHRUpload</code> and <code>AwsS3</code> plugins must be used:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token comment">// No options have to be provided to the XHRUpload plugin,</span><span class="token comment">// the S3 plugin will configure it.</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>XHRUpload<span class="token punctuation">)</span>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>AwsS3<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment">// Options for S3</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>Please find <a href="https://uppy.io/docs/aws-s3/">more info and examples</a> in the docs.</p><h2 id="Transloadit-getAssemblyOptions"><a href="#Transloadit-getAssemblyOptions" class="headerlink" title="Transloadit getAssemblyOptions"></a>Transloadit <code>getAssemblyOptions</code></h2><p>We’ve added a <code>getAssemblyOptions</code> function option to the <code>Transloadit</code> plugin. This option can return an object or a Promise for an object to configure the Transloadit assembly. The returned object can contain params, a signature, and fields.</p><p><code>getAssemblyOptions</code> is called on each file, so each file can return a different set of options. Files that returned the same options are bundled together and run through a single assembly. Files that return different options will be run through different assemblies.</p><p>This means that it is now possible to make assembly parameters depend on user input from eg. the <code>MetaData</code> plugin, and have different parameters for different files. It’s now also possible to generate very short-lived signatures on the server when an upload starts, by calling fetch inside the <code>getAssemblyOptions</code> hook.</p><h2 id="Webcam-1-2-3-smile"><a href="#Webcam-1-2-3-smile" class="headerlink" title="Webcam: 1, 2, 3 smile!"></a>Webcam: 1, 2, 3 smile!</h2><p>Webcam plugin now has a new exciting feature — ⏱ <code>countdown</code>. If you set it to 3 seconds, for example, then after pressing the capture button, Uppy will count to 3 before actually taking your selfie, so you’ll have the time to fix your hair:</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Webcam<span class="token punctuation">,</span> <span class="token punctuation">{</span> countdown<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h2 id="Tons-of-Uppy-Server-improvements"><a href="#Tons-of-Uppy-Server-improvements" class="headerlink" title="Tons of Uppy Server improvements"></a>Tons of Uppy Server improvements</h2><ul><li>Uppy Server uses Informer to display errors;</li><li>Pictures from Instagram carousels show up inline;</li><li>Uppy server now returns an <code>i-am</code> containing its instance url;</li><li>Disable socket channel from restarting an already completed file download;</li><li>Uppy client whitelisting has been made optional, you may use wildcard instead;</li><li>Added feature to set master oauth redirect uri for multiple uppy-server instances;</li><li>Added options to support for redis session storage on the standalone server;</li><li>Uppy-server can be started as a binary <code>uppy-server</code>;</li><li>Downloaded files are stored based on uuids;</li><li>Upload state is stored on redis (useful for Goldern Retriever plugin).</li></ul><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><p>Here is the full list of changes for version <code>0.18</code>:</p><ul><li>goldenretriver: use Service Woker first, then IndexedDB, add file limits for IndexedDB, figure out what restores from where, add throttling for localStorage state sync (@goto-bus-stop @arturi)</li><li>dashboard: flag to hide the upload button, for cases when you want to manually stat the upload (@arturi)</li><li>dashboard: place close btn inside the Dashboard, don’t close on click outside, place source icon near the file size (@arturi)</li><li>core: informer becomes a core API, <code>uppy.info(&#39;Smile! 📸&#39;, &#39;warning&#39;, 5000)</code> so its more concise with <code>uppy.log(&#39;my msg&#39;)</code> and supports different UI implementations (@arturi, #271)</li><li>docs: first stage — on using plugins, all options, list of plugins, i18n, uppy-server (@arturi, @goto-bus-stop, @ifedapoolarewaju)</li><li>provider: file size sorting (@ifedapoolarewaju)</li><li>provider: show loading screen when checking auth too (@arturi)</li><li>uploaders: add direct-to-s3 upload plugin (@goto-bus-stop)</li><li>core: ability to re-upload all files, even <code>uploadComplete</code> ones, reset progress (@arturi)</li><li>goldenretriver: recover selected or in progress files after a browser crash or closed tab: alpha-version, add LocalStorage, Service Worker and IndexedDB (@arturi @goto-bus-stop @nqst #268)</li><li>xhrupload: add XHRUpload a more flexible successor to Multipart, so that S3 plugin can depend on it (@goto-bus-stop #242)</li><li>core: add getFile method (@goto-bus-stop, #263)</li><li>provider: use informer to display errors (@ifedapoolarewaju)</li><li>provider: flatten instagram carousels #234 (@ifedapoolarewaju)</li><li>server: add uppy-server url as <code>i-am</code> header (@ifedapoolarewaju)</li><li>server: disable socket channel from restarting an already completed file download (@ifedapoolarewaju)</li><li>server: make uppy client whitelisting optional. You may use wildcard instead (@ifedapoolarewaju)</li><li>server: master oauth redirect uri for multiple uppy-server instances</li><li>server: options support for redis session storage on standalone server (@ifedapoolarewaju)</li><li>server: start uppy-server as binary <code>uppy-server</code> (@ifedapoolarewaju)</li><li>server: store downloaded files based on uuids (@ifedapoolarewaju)</li><li>server: store upload state on redis (@ifedapoolarewaju)</li><li>server: use uppy informer for server errors (@ifedapoolarewaju, #272)</li><li>server: whitelist multiple uppy clients (@ifedapoolarewaju)</li><li>transloadit: emit an event when an assembly is created (@goto-bus-stop / #244)</li><li>transloadit: function option for file-dependent <code>params</code> (@goto-bus-stop / #250)</li><li>tus: Save upload URL early on (@goto-bus-stop #261)</li><li>tus: return immediately if no files are selected (@goto-bus-stop #245)</li><li>uppy-server: add uppy-server metrics to Librato (@ifedapoolarewaju @kiloreux)</li><li>webcam: add 1, 2, 3, smile! to webcam, onBeforeSnapshothook (@arturi, #187, #248)</li><li>website: live example on the homepage, “try me” button, improve /examples (@arturi)</li></ul><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi! Another month — a new Uppy release 🎉&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: current latest release is actually &lt;code&gt;0.19&lt;/code&gt;, but this post got delayed, so we are publishing it first. &lt;code&gt;0.19&lt;/code&gt; post is coming next.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;New-documentation&quot;&gt;&lt;a href=&quot;#New-documentation&quot; class=&quot;headerlink&quot; title=&quot;New documentation&quot;&gt;&lt;/a&gt;New documentation&lt;/h2&gt;&lt;p&gt;Documentation for Uppy has been re-written, and now features chapters on Uppy’s settings and API, using various plugins, and running Uppy Server. Check it out: &lt;a href=&quot;https://uppy.io/docs/&quot;&gt;https://uppy.io/docs/&lt;/a&gt;. More chapters to come!&lt;/p&gt;
&lt;h2 id=&quot;The-GoldenRetriever&quot;&gt;&lt;a href=&quot;#The-GoldenRetriever&quot; class=&quot;headerlink&quot; title=&quot;The GoldenRetriever&quot;&gt;&lt;/a&gt;The GoldenRetriever&lt;/h2&gt;&lt;p&gt;The GoldenRetriever has been released as a public beta. For details, please refer to the previous post, &lt;a href=&quot;https://uppy.io/blog/2017/07/golden-retriever/&quot;&gt;The GoldenRetriever: Making uploads survive browser crashes&lt;/a&gt;, but the gist is: when enabled, this plugin will save uppy-state to localStorage on every change, and then if your browser crashes, or you accidentaly navigate away from a tab,later when you return, your uploads will resume like nothing happened. Spoiler: it uses Service Workers and IndexedDB.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;border&quot; src=&quot;/images/blog/0.18/golden-retriever.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The Golden Retriever: Making uploads survive browser crashes</title>
    <link href="https://uppy.io/blog/2017/07/golden-retriever/"/>
    <id>https://uppy.io/blog/2017/07/golden-retriever/</id>
    <published>2017-07-31T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.469Z</updated>
    
    <content type="html"><![CDATA[<p><strong>TL;DR:</strong> We’re on a mission to improve file uploading on the web. We released <a href="https://tus.io" target="_blank" rel="noopener">tus</a>: the open protocol for resumable file uploads, as well as Uppy: the next open source file uploader for web browsers. Uppy uses tus, which makes it resilient to poor network conditions and crashing servers. Today we’re launching an Uppy feature that also makes it resilient to browser crashes, which we believe is an industry first. We’re sharing a quick <a href="/blog/2017/07/golden-retriever/#demo">demo</a> video, a bit of <a href="/blog/2017/07/golden-retriever/#uppy">background</a>, <a href="/blog/2017/07/golden-retriever/#how">how</a> exactly we achieved this, and how you can <a href="/blog/2017/07/golden-retriever/#try">try</a> it yourself.</p><p>***</p><p>Don’t you just hate it when you’re about to share the perfect photos from your trip to Iceland, and halfway through, your cat jumps on the keyboard and trashes your browser? Or the battery in your laptop dies? Or you accidentally close the tab or navigate away? We hate that too!</p><p>If action games have had checkpoints since 1687 — why can’t file uploaders? Well, as it turns out, they can! We found a way to get those Iceland pics into the hands of your loved ones with near-zero levels of frustration, even after a dreaded Blue Screen of Death! (if that is still a thing ;)</p><a id="more"></a><p><a name="demo"></a></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>First off, let’s show you a demo 📹 of Uppy surviving a browser crash and picking up right where we left it:</p><figure class="wide"><video alt="Demo video showing the Golden Retriever file restoring plugin in action" controls><source src="/images/blog/golden-retriever/uppy-golden-retriever-crash-demo-2.mp4" type="video/mp4">Your browser does not support the video tag, you can <a href="/images/blog/golden-retriever/uppy-golden-retriever-crash-demo-2.mp4">download the video</a> to watch it.</video></figure><p><a name="uppy"></a></p><h2 id="Uppy"><a href="#Uppy" class="headerlink" title="Uppy?"></a>Uppy?</h2><p>For those of you who are new here, Uppy is the next-gen open source file uploader for the web. It is made by Transloadit and thus it works great with their uploading &amp; encoding platform — but it also works great without! Simply add Uppy JavaScript to your website, deploy your own tusd/Node.js/Apache/Nginx server, and be on your way. Add <a href="https://github.com/transloadit/uppy-server" target="_blank" rel="noopener">uppy-server</a>, and your users will be able to pick files from remote sources like Dropbox and Instagram. Uppy’s focus is on the modern web, and we go through extreme lengths to achieve the smoothest of user experiences, and the most durable of reliabilities. 🙃</p><h2 id="Hacking-trip"><a href="#Hacking-trip" class="headerlink" title="Hacking trip"></a>Hacking trip</h2><p>Our core team is spread across three continents and five cities, and most of us have never met in person, with the majority of communication happening in GitHub and Slack. Just last week, we got together in Berlin for a crazy week of pink limo rides, Indian food and Mario Kart 64. More on that on the <a href="https://transloadit.com/blog/2017/08/team-meetup-2017/" target="_blank" rel="noopener">Transloadit blog</a>.</p><figure class="wide"><img src="/images/blog/golden-retriever/uppy-team-kong.jpg"></figure><p>While enjoying some world-famous-in-Germany “Flammkuchen”, we were thinking about even more ways to make file uploading better (yes, we really can’t stop thinking about that). We then sat together in one room for a few days of hacking and came up with something neat. </p><h2 id="The-Golden-Retriever"><a href="#The-Golden-Retriever" class="headerlink" title="The Golden Retriever"></a>The Golden Retriever</h2><p>Uppy has a new friend to play with. Meet the Golden Retriever, our file recovery plugin:</p><center><img src="/images/blog/golden-retriever/catch-fail-2.gif" alt="Golden Retriever failing to catch something" title="Good try, girl!"></center><p>As you can see, we’re not yet fully done with training her, but we’re getting there! 😄</p><p>But wait, we can hear you think, didn’t <a href="https://tus.io" target="_blank" rel="noopener">tus.io</a> already make resumable uploads possible? Yes indeed, and it does an awesome job at recovering from poor network conditions. However, if your browser suddenly decided to crash, Uppy would have no idea about what it was doing before, and you would have to re-select and edit your files all over. </p><center><img src="/images/blog/golden-retriever/no-idea-dog-3.gif" alt="Dog has no idea what he is doing" title="Keep trying, buddy!"></center><p>For those cases, our Golden Retriever now comes to the rescue! It saves Uppy’s memory (state) in browser cache with every move you make. This means that when Uppy suddenly crashes for whatever reason, our plugin will be able to retrieve this memory upon restart, and offer to resume where you left off. Sounds simple enough right? So why hasn’t anybody attempted this before?</p><p>As it turns out, it’s tricky. For one thing, no other competing file uploader uses tus, and resuming uploads without standardized and scrutinized components is really leaving you with more problems than you’re trying to solve in the first place. But with tus, we are standing on the shoulders of a giant and need not worry about the resumability aspect of the transmission.</p><p>So then it becomes all about remembering what was going on with file selection and uploading right before the crash. One of the big issues here is that because of security reasons, Uppy is no longer allowed to access the selected files on your disk after a crash. Reasonable of course, but this meant that we had to deploy a number of workarounds that — while it may cause our inner purist some upset - combined, now amount to a pretty sweet user experience for the majority of cases. And in the end, that is what Uppy is all about: pleasing and delighting its users.</p><p><a name="how"></a></p><h2 id="👻-How-it-works"><a href="#👻-How-it-works" class="headerlink" title="👻 How it works"></a>👻 How it works</h2><p>If you really want to know…</p><p>Because we cannot access the files that we were uploading from disk, we cache them inside the browser.</p><p>It all started with <a href="https://github.com/transloadit/uppy/issues/237" target="_blank" rel="noopener">a prototype</a> by <a href="https://github.com/richardwillars" target="_blank" rel="noopener">Richard Willars</a>, which used a Service Worker to store files and states. Service Workers are great for when you close a tab, but when the browser dies, so does the Service Worker (in most cases). Also: iOS does not support it yet. So, we looked at Local Storage, which is almost universally available and <em>can</em> survive a browser crash, but can’t be used to store blobs. We also considered IndexedDB, which <em>can</em> store blobs, but is less available and has severe limits on how much you can or should store in it.</p><p>Since all of these technologies came with specific drawbacks, which one should we pick?</p><p>Why, all of them, of course! By combining the three, they cover each other’s disadvantages with their own advantages. Here’s what goes where: </p><ul><li>Local Storage stores all files state, without blobs (the actual data of the file), and restores this meta information on boot.</li><li>Service Worker stores references to all file blobs in memory. This should persist when navigating away from a page or closing the browser tab, but will likely get destroyed after a browser crash / quit.</li><li>IndexedDB stores all files that can reasonably be stored there, up to 10 MB per file and 300 MB in total (we are still debating reasonable limits). This persists until either the browser or Uppy decides to do a cleanup.</li></ul><p>Now when Uppy starts, we restore all meta information from Local Storage to get an idea of what was going on. For the blobs, we try to recover data from both the Service Worker and IndexedDB. This goes a long way into supporting many disastrous scenarios out there. </p><p>In some cases (very large files or a complete browser crash), we won’t be able to recover the file, but we do have valuable information about it, such as the name and a preview.</p><p>Our current idea is that we could present the user with “ghost files” for these edge cases, and ask them to re-add such files. Here’s an early mockup, but we would love more feedback on this:</p><p><img src="/images/blog/golden-retriever/desktop-ghost.png" alt="Design mockup with ghosts" title="Design mockup with ghosts"></p><p>For the remaining cases, if an upload was already in progress before the crash/refresh, and especially if it was resumable (via <a href="https://tus.io" target="_blank" rel="noopener">tus</a>, for example), Golden Retriever just picks up from where it all went south. Our Golden Retriever will also clean up after herself: when files are successfully uploaded, or you decide to delete them, they will be removed from all “permanent” storages.</p><p><a name="try"></a></p><h2 id="🚦-Give-it-a-try-in-alpha"><a href="#🚦-Give-it-a-try-in-alpha" class="headerlink" title="🚦 Give it a try in alpha"></a>🚦 Give it a try in alpha</h2><p>Golden Retriever already works — tail awagging — and feels like magic :sparkles:, but it is also unstable, and hasn’t been tested on all the different devices yet. We encourage you to try it out though:</p><figure class="highlight sh"><table><tr><td class="code"><pre>git clone https://github.com/transloadit/uppy.gitgit checkout feature/restore-filesnpm installnpm run dev</pre></td></tr></table></figure><p>A new browser tab with Uppy + Golden Retriever should open in a moment after the last command from above. The app entry point is in <code>examples/bundled-example/main.js</code>, it rebuilds on change. Enjoy! And please give your feedback in the <a href="https://github.com/transloadit/uppy/pull/268" target="_blank" rel="noopener">#268</a> PR 🎉</p><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; We’re on a mission to improve file uploading on the web. We released &lt;a href=&quot;https://tus.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tus&lt;/a&gt;: the open protocol for resumable file uploads, as well as Uppy: the next open source file uploader for web browsers. Uppy uses tus, which makes it resilient to poor network conditions and crashing servers. Today we’re launching an Uppy feature that also makes it resilient to browser crashes, which we believe is an industry first. We’re sharing a quick &lt;a href=&quot;/blog/2017/07/golden-retriever/#demo&quot;&gt;demo&lt;/a&gt; video, a bit of &lt;a href=&quot;/blog/2017/07/golden-retriever/#uppy&quot;&gt;background&lt;/a&gt;, &lt;a href=&quot;/blog/2017/07/golden-retriever/#how&quot;&gt;how&lt;/a&gt; exactly we achieved this, and how you can &lt;a href=&quot;/blog/2017/07/golden-retriever/#try&quot;&gt;try&lt;/a&gt; it yourself.&lt;/p&gt;
&lt;p&gt;***&lt;/p&gt;
&lt;p&gt;Don’t you just hate it when you’re about to share the perfect photos from your trip to Iceland, and halfway through, your cat jumps on the keyboard and trashes your browser? Or the battery in your laptop dies? Or you accidentally close the tab or navigate away? We hate that too!&lt;/p&gt;
&lt;p&gt;If action games have had checkpoints since 1687 — why can’t file uploaders? Well, as it turns out, they can! We found a way to get those Iceland pics into the hands of your loved ones with near-zero levels of frustration, even after a dreaded Blue Screen of Death! (if that is still a thing ;)&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.17: Restrictions</title>
    <link href="https://uppy.io/blog/2017/07/0.17/"/>
    <id>https://uppy.io/blog/2017/07/0.17/</id>
    <published>2017-07-11T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.465Z</updated>
    
    <content type="html"><![CDATA[<p>Hi! We are back with yet another Uppy release that contains some often requested features such as file restrictions and better file type detection, alongside a brand new Instagram plugin, UI improvements and more!</p><a id="more"></a><h2 id="⚠️-File-Restrictions"><a href="#⚠️-File-Restrictions" class="headerlink" title="⚠️ File Restrictions"></a>⚠️ File Restrictions</h2><p>Something that a few of our biggest fans were asking for, is finally here! Here’s the gist of it:</p><figure class="highlight js"><table><tr><td class="code"><pre>  <span class="token function">Uppy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    debug<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    autoProceed<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    restrictions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      maxFileSize<span class="token punctuation">:</span> <span class="token number">300000</span><span class="token punctuation">,</span>      maxNumberOfFiles<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>      minNumberOfFiles<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      allowedFileTypes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'image/*'</span><span class="token punctuation">,</span> <span class="token string">'video/*'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    onBeforeFileAdded<span class="token punctuation">:</span> <span class="token punctuation">(</span>currentFile<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentFile<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'my-file.jpg'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'This is not the file I was looking for'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    onBeforeUpload<span class="token punctuation">:</span> <span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'Too few files :('</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>Basically, there are two ways to set restrictions:</p><p>1. Using the <code>restrictions</code> object in Uppy’s core settings:</p><figure class="highlight js"><table><tr><td class="code"><pre>restrictions<span class="token punctuation">:</span> <span class="token punctuation">{</span>  maxFileSize<span class="token punctuation">:</span> <span class="token number">300000</span><span class="token punctuation">,</span>  maxNumberOfFiles<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  minNumberOfFiles<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  allowedFileTypes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'image/*'</span><span class="token punctuation">,</span> <span class="token string">'video/*'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></pre></td></tr></table></figure><p>Translation: allow only images and videos of any type, a minimum of 2 and maximum of 5 files must be selected, 300kb or less.</p><p><code>allowedFileTypes</code> must be an array of strings with supported file mime-types. Anything from <a href="https://www.iana.org/assignments/media-types/media-types.xhtml" target="_blank" rel="noopener">this list</a> should work, as long as Uppy is able to detect it (and Uppy promises to try real hard, see below for details). Both wildcards <code>video/*</code> and specicifc types <code>image/jpeg</code> are supported!</p><p>2. Using the more advanced callbacks: <code>onBeforeFileAdded(currentFile, files)</code>, which fires before a file is added and allows you to run whatever checks you wish against either the single file that is about to be added or all files currently selected / uploaded, and <code>onBeforeUpload(files)</code>, where you are able to check stuff before proceeding with the upload.</p><p>Basically, use the first option for the simple stuff such as limiting uploads to images or a maximum of three files. Use the second option for things like “we need users to upload 5 photos and an audio file, so we can make a short clip out of it”. Let us know if this suits your needs, we are all 👂ears👂!</p><p>Also, a new <code>note</code> option has been added to the Dashboard, as a quick and easy way to inform users about the restrictions you choose to set up:</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Dashboard<span class="token punctuation">,</span> <span class="token punctuation">{</span>  note<span class="token punctuation">:</span> <span class="token string">'Images and video only, 300kb or less'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img class="border" src="/images/blog/0.17/restrictions-note.jpg"></p><h2 id="📸-Instagram-plugin-and-UI-overhaul"><a href="#📸-Instagram-plugin-and-UI-overhaul" class="headerlink" title="📸 Instagram plugin and UI overhaul"></a>📸 Instagram plugin and UI overhaul</h2><p>Yes, Instagram is now supported in Uppy, so you can easily import all of your cat, dog and food pictures!</p><figure class="wide"><br>  <img class="border" src="/images/blog/0.17/instagram-ui.jpg"><br></figure><p>You can try it live in the <a href="https://uppy.io/examples/dashboard/">Dashboard example</a>.</p><p>The UI for all “provider” plugins, which is the way we call Google Drive, Dropbox and other external services, have been revamped to make better use of the space.</p><p>Files are now selected, or added, on click/tap, rather than double click, which is easier and also works on mobile. 🙀</p><p><img class="border" src="/images/blog/0.17/provider-search.jpg"></p><h2 id="StatusBar"><a href="#StatusBar" class="headerlink" title="StatusBar"></a>StatusBar</h2><p>The Dashboard’s StatusBar has been improved. First of all, even though it still comes bundled with the Dashboard like before, it is now a separate plugin that can be used anywhere, like with the Drag and Drop plugin or your own custom thing. Furthermore, it now shows fatal upload errors in addition to the upload / processing / transcoding progress. 💪</p><p>In the Dashboard, you can now disable the StatusBar and/or Informer if you don’t need them or want something custom, by setting <code>disableStatusBar: true</code> and <code>disableInformer: true</code>.</p><p>Details: <a href="https://github.com/transloadit/uppy/pull/217" target="_blank" rel="noopener">#217</a></p><h2 id="Better-file-type-detection"><a href="#Better-file-type-detection" class="headerlink" title="Better file type detection"></a>Better file type detection</h2><p>We’ve added a <a href="https://github.com/sindresorhus/file-type" target="_blank" rel="noopener"><code>file-type</code></a> module that helps with figuring out the file type by reading the first magic bytes of the file. If that doesn’t work, we try to use the mime-type provided by the system/browser, and if that is still a dead end, we attempt to figure it out by extension. All in all, this leads to a more robust file type detecting experience. Personally, I’m just happy my Sex and the City 🍸 <code>.avi</code> files are now recognized as <code>video</code> on a Mac! </p><p>Further details can be found here: <a href="https://github.com/transloadit/uppy/pull/219" target="_blank" rel="noopener">#219</a></p><h2 id="Extracting-metadata-from-lt-form-gt-inputs"><a href="#Extracting-metadata-from-lt-form-gt-inputs" class="headerlink" title="Extracting metadata from &lt;form&gt; inputs"></a>Extracting metadata from <code>&lt;form&gt;</code> inputs</h2><p>If a plugin’s <code>target</code> is a <code>form</code> element, we are going to try to extract all the data from that form’s inputs and add it as <code>meta</code> to Uppy’s state. That <code>meta</code> is then merged with file’s meta when it is being added.</p><p>Uppy’s core options have received a new <code>meta</code> property, where you can define some metadata from the start, as well as a new <code>setMeta</code> method that can be called at any time.</p><p>See here for more details: <a href="https://github.com/transloadit/uppy/pull/238" target="_blank" rel="noopener">#238</a> </p><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><ul><li>Added a <code>reset()</code> method that stops uploads, clears files and totalProgress, and restores things to the way they were on initialization, before user interactions <a href="https://github.com/transloadit/uppy/pull/226" target="_blank" rel="noopener">#226</a></li><li>Support for headers in Multipart plugin <a href="https://github.com/transloadit/uppy/pull/224" target="_blank" rel="noopener">#224</a></li><li>Set bytesUploaded/bytesTotal as soon as the file is added, fixes a <code>NaN</code> issue <a href="https://github.com/transloadit/uppy/pull/232" target="_blank" rel="noopener">#232</a></li></ul><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><p>Here is the full list of changes for version 0.17:</p><ul><li>core: added restrictions — by file type, size, number of files (@arturi)</li><li>provider: improved UI: improve overall look, breadcrumbs, more responsive (@arturi)</li><li>core: css-in-js demos, try template-css (@arturi @goto-bus-stop #239)</li><li>core: added <code>uppy.reset()</code> as discussed in #179 (@arturi)</li><li>core: added nanoraf <a href="https://github.com/yoshuawuyts/choo/pull/135/files?diff=unified" target="_blank" rel="noopener">https://github.com/yoshuawuyts/choo/pull/135/files?diff=unified</a> (@goto-bus-stop, @arturi)</li><li>core: file type detection: archives, markdown (possible modules: file-type, identify-filetype) example: <a href="http://requirebin.com/?gist=f9bea9602030f1320a227cf7f140c45f" target="_blank" rel="noopener">http://requirebin.com/?gist=f9bea9602030f1320a227cf7f140c45f</a>, <a href="http://stackoverflow.com/a/29672957" target="_blank" rel="noopener">http://stackoverflow.com/a/29672957</a> (@arturi)</li><li>dashboard: made file icons prettier: <a href="https://uppy.io/images/blog/0.16/service-logos.png">https://uppy.io/images/blog/0.16/service-logos.png</a> (@arturi, @nqst / #215)</li><li>fileinput: allow retrieving fields/options from form (@arturi #153)</li><li>server: configurable server port (@ifedapoolarewaju)</li><li>server: added support for custom providers (@ifedapoolarewaju)</li><li>statusbar: also show major errors, add “error” state (@goto-bus-stop)</li><li>statusbar: pre/postprocessing status updates in the StatusBar (@goto-bus-stop, #202)</li><li>statusbar: show status “Upload started…” when the remote upload has begun, but no progress events received yet (@arturi)</li><li>statusbar: work towards extracting StatusBar to a separate plugin, still bundle it with Dashboard (@goto-bus-stop, @arturi)</li><li>tus/uppy-server: support metadata in remote tus uploads (@ifedapoolarewaju, @goto-bus-stop / #210)</li><li>uploaders: added direct-to-s3 upload plugin and test it with the flow to then upload to transloadit, stage 1, WIP (@goto-bus-stop)</li><li>uppy/uppy-server: Made a barely working Instagram Plugin (@ifedapoolarewaju / #21)</li><li>uppy/uppy-server: allow google drive/dropbox non-tus (i.e multipart) remote uploads (@arturi, @ifedapoolarewaju / #205)</li><li>uppy/uppy-server: do not show files that cannot be downloaded from Google Drive (@ifedapoolarewaju)</li><li>uppy: fixed Google Drive uploads on mobile (double click issue) (@arturi)</li><li>core: updated prettier-bytes to fix the IE support issue <a href="https://github.com/Flet/prettier-bytes/issues/3" target="_blank" rel="noopener">https://github.com/Flet/prettier-bytes/issues/3</a> (@arturi)</li><li>core: use URL.createObjectURL instead of resizing thumbnails (@arturi, @goto-bus-stop / #199)</li><li>dashboard: fixed ETA when multiple files are being uploaded (@goto-bus-stop, #197)</li><li>transloadit: fixed receiving assembly results that are not related to an input file (@arturi, @goto-bus-stop / #201)</li><li>transloadit: use the <code>tus_upload_url</code> to reliably link assembly results with their input files (@goto-bus-stop / #207)</li><li>transloadit: moved user-facing strings into locale option (@goto-bus-stop / <a href="https://github.com/transloadit/uppy/commit/87a22e7ee37b6fa3754fa34868516a6700306b60" target="_blank" rel="noopener">https://github.com/transloadit/uppy/commit/87a22e7ee37b6fa3754fa34868516a6700306b60</a>)</li><li>webcam: mute audio in realtime playback (@goto-bus-stop / #196)</li><li>temporarily downgrade yo-yoify, until shama/yo-yoify#45 is resolved (@arturi / <a href="https://github.com/transloadit/uppy/commit/6292b96" target="_blank" rel="noopener">https://github.com/transloadit/uppy/commit/6292b96</a>)</li></ul><p>Enjoy!</p><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi! We are back with yet another Uppy release that contains some often requested features such as file restrictions and better file type detection, alongside a brand new Instagram plugin, UI improvements and more!&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.16: Transloadit!</title>
    <link href="https://uppy.io/blog/2017/05/0.16/"/>
    <id>https://uppy.io/blog/2017/05/0.16/</id>
    <published>2017-05-24T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.465Z</updated>
    
    <content type="html"><![CDATA[<p>Hello there! Missed us much? :) We’re chomping at the bits, at least, to tell you about our latest release. This one has been in the works longer than usual, but then again, it’s also way cooler than usual, so let’s get right to it.</p><a id="more"></a><h2 id="Transloadit-integration-beta"><a href="#Transloadit-integration-beta" class="headerlink" title="Transloadit integration beta"></a>Transloadit integration beta</h2><p>Yes, you read that right! We now have an easily integrable <a href="https://transloadit.com" target="_blank" rel="noopener">Transloadit</a> plugin. It was a big push indeed and we owe a big debt of thanks to <a href="https://github.com/goto-bus-stop" target="_blank" rel="noopener">Renée</a> for going fully beast mode on this. The plugin is still in beta, but it works - and it’s awesome. That said, of course it is entirely optional: if you don’t use Transloadit, you don’t have to bundle the plugin.</p><video alt="Demo video showing the Transloadit upload plugin in action." muted autoplay loop><br>  <source src="/images/blog/0.16/transloadit.webm" type="video/webm"><br>  <source src="/images/blog/0.16/transloadit.mp4" type="video/mp4"><br></video><p>The Transloadit plugin for Uppy handles creating an “Assembly” (a file conversion job) before uploading files, and can optionally wait for file conversions to complete before showing the uploads as successful, as shown above. Listen for the <code>core:success</code> event to respond to upload completion, just like you would without the Transloadit plugin.</p><p>We’ll be adding decent documentation to the Uppy website soon, but <a href="https://gist.github.com/kvz/8ae07aa8c063c8e55abbc1580b50c8a4#file-uppy-demo-js-L117-L147" target="_blank" rel="noopener">here</a> is a quick code sample of how a Transloadit plugin integration would look like already.</p><h2 id="More-work-on-high-level-React-components"><a href="#More-work-on-high-level-React-components" class="headerlink" title="More work on high-level React components"></a>More work on high-level React components</h2><p>Since the last release, we’ve been exploring possibilities for an official set of React components. Initially, we’ll be providing component wrappers for the existing Uppy UI plugins, such as the <a href="/examples/dashboard">Dashboard</a> and <a href="/examples/dragdrop">DragDrop</a> plugins. They aren’t ready yet, but if you’d like to follow along with development, check out the work that has been done so far in pull request <a href="https://github.com/transloadit/uppy/pull/170" target="_blank" rel="noopener">#170</a>!</p><h2 id="DOM-element-in-target-option-uppy-close-for-tearing-down-an-Uppy-instance"><a href="#DOM-element-in-target-option-uppy-close-for-tearing-down-an-Uppy-instance" class="headerlink" title="DOM element in target: option, uppy.close() for tearing down an Uppy instance"></a>DOM element in <code>target:</code> option, <code>uppy.close()</code> for tearing down an Uppy instance</h2><p>While laying the groundwork for the React component integrations, Uppy has also become a bit friendlier towards being integrated with other frameworks and in single-page apps. The <code>target:</code> option in each plugin used to work only with CSS selectors, which was difficult to use if the plugin should be mounted on a dynamically generated element. In 0.16, either a query selector or an actual DOM element can be passed in.</p><p>The new <code>.close()</code> method on the Uppy instance cleans up all of Uppy’s event handlers and DOM elements. Useful when navigating away from a page with an Uppy uploader in a single-page app, or when unmounting a React component that contains an Uppy instance!</p><h2 id="Server-time"><a href="#Server-time" class="headerlink" title="Server time!"></a>Server time!</h2><p>We got everything covered - front-to-back-end - so you can be sure we also got some things going on the server side.</p><ul><li>parallelizing downloading/uploading remote files: start uploading chunks right away, while still downloading the file on disk. Even though the server may download files relatively faster, it is good to know that you don’t have to wait out the download before the upload begins. </li><li>Image thumbnails are now also shown for remote files.</li><li>Automated tests have been added using the test library, <a href="https://facebook.github.io/jest/" target="_blank" rel="noopener">jest</a>.</li><li>Remote files are now deleted from local disk immediately after a successful upload.</li></ul><h2 id="And"><a href="#And" class="headerlink" title="And"></a>And</h2><p>Multiple necessary chores (the kind you don’t like to talk about at parties), such as:</p><ul><li>Replacing <code>babel-preset-es2015-loose</code> by the standard es2015 preset with <code>loose</code> option</li><li>Merging the Tus10 plugin options with <code>tus-js-client</code> options</li><li>We reviewed the uppy-server README to be more elaborate when getting started.</li><li>The Service logo is now visible on the corresponding file in the Dashboard. For example if a file is being uploaded from Google Drive you would see a Google Drive logo easily identifying where the file is from. Take a look!</li></ul><p><img src="/images/blog/0.16/service-logos.png"></p><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><p>Here is the full list of changes for version 0.16:</p><ul><li>uploaders: make sure uploads retry/resume if started when offline or disconnected, retry when back online / failed <a href="https://github.com/transloadit/uppy/pull/135" target="_blank" rel="noopener">https://github.com/transloadit/uppy/pull/135</a> (@arturi, @ifedapoolarewaju)</li><li>transloadit: add basic (beta) version of Transloadit plugin (@goto-bus-stop, @kvz, @tim-kos / #28)</li><li>transloadit: emit an upload event w/ tl data when a file upload is complete (#191 @goto-bus-stop)</li><li>webcam: implement reading audio+video from webcam (@goto-bus-stop / #175)</li><li>webcam: Make the webcam video fill the available space as much as possible (@goto-bus-stop / #190)</li><li>tus: Merge tus-js-client options with uppy-tus. Hence, enable custom headers support (@goto-bus-stop)</li><li>multipart/tus: Remove Promise.all() calls with unused results (@goto-bus-stop / #121)</li><li>dashboard: fix Dashboard modal close button position (@goto-bus-stop / #171)</li><li>core: pass through errors (@goto-bus-stop / #185)</li><li>core: accept a DOM element in <code>target:</code> option (@goto-bus-stop / #169)</li><li>core: Remove the last few potentially buggy uses of <code>document.querySelector</code> (@goto-bus-stop)</li><li>dashboard: Fix dashboard width when multiple instances exist (@goto-bus-stop / #184)</li><li>dashboard: add service logo / name to the selected file in file list (@arturi)</li><li>server: begin adding automated tests, maybe try <a href="https://facebook.github.io/jest" target="_blank" rel="noopener">https://facebook.github.io/jest</a> (@ifedapoolarewaju)</li><li>server: add image preview / thumbnail for remote files, if its in the API of services (@ifedapoolarewaju)</li><li>server: research parallelizing downloading/uploading remote files: start uploading chunks right away, while still storing the file on disk (@ifedapoolarewaju)</li><li>server: delete file from local disk after upload is successful (@ifedapoolarewaju)</li><li>website: try on a Github ribbon <a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">http://tholman.com/github-corners/</a> (@arturi / #150)</li><li>website: different meta description for pages and post (@arturi)</li><li>server: well-documented README (@ifedapoolarewaju)</li><li>react: [WIP] High-level React Components (@goto-bus-stop / #170)</li><li>core: add <code>uppy.close()</code> for tearing down an Uppy instance (@goto-bus-stop / #182)</li><li>core: replace <code>babel-preset-es2015-loose</code> by standard es2015 preset with <code>loose</code> option (@goto-bus-stop / #174)</li></ul><p>Enjoy!</p><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello there! Missed us much? :) We’re chomping at the bits, at least, to tell you about our latest release. This one has been in the works longer than usual, but then again, it’s also way cooler than usual, so let’s get right to it.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.15: Spring cleanup</title>
    <link href="https://uppy.io/blog/2017/03/0.15/"/>
    <id>https://uppy.io/blog/2017/03/0.15/</id>
    <published>2017-03-15T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.465Z</updated>
    
    <content type="html"><![CDATA[<p>Spring is in the air and Uppy is feeling particularly full of life. In this post about Uppy 0.15, we have some exciting stories about <code>babel-plugin-yo-yoify</code>, progress event throttling, and new friends.</p><a id="more"></a><h2 id="Yo-yoify-for-NPM-installed-Uppy"><a href="#Yo-yoify-for-NPM-installed-Uppy" class="headerlink" title="Yo-yoify for NPM-installed Uppy"></a>Yo-yoify for NPM-installed Uppy</h2><p>In <a href="http://localhost:4000/blog/2017/02/0.14/" target="_blank" rel="noopener"><code>0.14</code></a>, we added <code>yo-yoify</code> transform to give Uppy some extra speed and eliminate <code>Function.caller</code> issues. As it turned out, we <a href="https://github.com/transloadit/uppy/issues/158" target="_blank" rel="noopener">forgot</a> about our Babel-transpiled <code>lib</code> version of Uppy that gets published to NPM 🙀. We then spent some time creating a standalone version of <code>yo-yoify</code> that would be able to parse <code>yo-yo</code> template strings before Babel-transpilation, only to discover that there already is a <a href="https://www.npmjs.com/package/babel-plugin-yo-yoify" target="_blank" rel="noopener"><code>babel-plugin-yo-yoify</code></a> that not only does precisely that, but also frees us from jumping through a lot of unnecessary hoops. It did <a href="https://github.com/goto-bus-stop/babel-plugin-yo-yoify/issues/9" target="_blank" rel="noopener">have</a> <a href="https://github.com/goto-bus-stop/babel-plugin-yo-yoify/pull/8" target="_blank" rel="noopener">a few</a> <a href="https://github.com/goto-bus-stop/babel-plugin-yo-yoify/issues/11" target="_blank" rel="noopener">issues</a> at first, but luckily our friend <a href="https://github.com/goto-bus-stop" target="_blank" rel="noopener">Renée</a> was available to colaborate with us on this. Renée has also agreed to join Uppy for a while to help us with other pressing issues. So, silver linings — bugs can sometimes lead to new friends and wonderful beginnings. We are very excited about what this all means for Uppy in the months to come.</p><p>Uppy from NPM is now good to go and the issue has been completely resolved. You can update at: <a href="https://www.npmjs.com/package/uppy" target="_blank" rel="noopener">https://www.npmjs.com/package/uppy</a>. And yeah, if you use <code>yo-yo</code>, give <a href="https://www.npmjs.com/package/babel-plugin-yo-yoify" target="_blank" rel="noopener"><code>babel-plugin-yo-yoify</code></a> a try.</p><h2 id="Pause-amp-Resume-Remote-Uploads"><a href="#Pause-amp-Resume-Remote-Uploads" class="headerlink" title="Pause &amp; Resume Remote Uploads"></a>Pause &amp; Resume Remote Uploads</h2><p>Just like with “local” uploads, Uppy can now pause and resume remote uploads from Google Drive or Dropbox (handled on the backend by <code>uppy-server</code> + <code>tus</code>). 🎉</p><h2 id="Progress-Throttling"><a href="#Progress-Throttling" class="headerlink" title="Progress Throttling"></a>Progress Throttling</h2><p>While working on pausing remote uploads with <code>uppy-server</code>, Ife discovered a strange bug: uppy-client would hang during the upload, after which the progress would immediately jump to 100%. After some solid Sherlock Holmesing, we found what was causing it: uploads were happening too fast. This was leading to progress events being sent very, very often (like 300 / second), which trashed the interface rendering loop. We have solved this by <a href="https://github.com/tus/tus-js-client/commit/9940f27b2361fd7e10ba58b09b60d82422183bbb" target="_blank" rel="noopener">adding throttling in tus-js-client</a> (thanks Marius!) and <a href="https://github.com/transloadit/uppy-server/commit/936ad48e92631c45d123664900b9aabcf7a190fa" target="_blank" rel="noopener">uppy-server</a> (thanks Ife!). I would also very much like to take this opportunity to thank myself for <a href="https://github.com/transloadit/uppy/commit/1d5f4404546420442deabc94df84bd3ec0677eec" target="_blank" rel="noopener">fixing</a> <a href="https://github.com/transloadit/uppy/commit/db32c6f4fd85420532f27f04920dbaf6d126ea9b" target="_blank" rel="noopener">it</a> in uppy-client too! :innocent:</p><p>To prevent “jumping” progress, numbers and text in StatusBar are now only updated once a second. Plus, we have switched to <a href="https://www.npmjs.com/package/prettier-bytes" target="_blank" rel="noopener"><code>prettier-bytes</code></a>, which adds some nice number rounding. Smooth as butter!</p><p>TL;DR Uppy was simply too fast at uploading, so we had to shorten the leash a bit!</p><h2 id="Informer-coming-at-you-in-full-color-mode"><a href="#Informer-coming-at-you-in-full-color-mode" class="headerlink" title="Informer coming at you in full-color mode"></a>Informer coming at you in full-color mode</h2><p>Informer will now be able to change the way it looks depending on the <code>type</code> argument:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="token comment">// (`'informer'`, `text`, `type`, `duration`)</span>uppy<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'informer'</span><span class="token punctuation">,</span> <span class="token string">'Connected!'</span><span class="token punctuation">,</span> <span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img src="/images/blog/0.15/informer.png"></p><p>This supports the following <code>type</code>s: <code>info</code>, <code>warning</code>, <code>error</code>, <code>success</code>, all with their own colors!</p><h2 id="Some-other-things"><a href="#Some-other-things" class="headerlink" title="Some other things"></a>Some other things</h2><ul><li>Multipart now treats all 2xx responses as successful and returns xhr object in <code>core:upload-success</code> event callback.</li><li>That progress circle that you can see on each file in Dashboard has been improved on the inside: precise <code>circleLength</code> and <code>stroke-dasharray/stroke-dashoffset</code> calculation.</li><li>Uppy-server returns uploaded file urls and sizes for remote uploads (from Google Drive &amp; Dropbox).</li><li>Provider plugins now have a loading screen, error screen and logout link. Breadcrumbs are also working again.</li></ul><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><p>Here is the full list of changes for version 0.15:</p><ul><li>build: update dependencies and eslint-plugin-standard, nodemon –&gt; onchange, because simpler and better options (@arturi)</li><li>build: fix <code>Function.caller</code> issue in <code>lib</code> which gets published to NPM package, add babel-plugin-yo-yoify (@arturi #158 #163)</li><li>provider: show error view for things like not being able to connect to uppy server, should this be happening when uppy-server is unavailable <a href="http://i.imgur.com/cYJakc9.png" target="_blank" rel="noopener">http://i.imgur.com/cYJakc9.png</a> (@arturi, @ifedapoolarewaju)</li><li>provider: loading indicator while files from GoogleDrive / Dropbox are loading (@arturi, @ifedapoolarewaju)</li><li>provider: logout link/button (@arturi, @ifedapoolarewaju)</li><li>provider: fix breadcrumbs (@ifedapoolarewaju)</li><li>server: refactor local/remote uploads in tus, allow for pause/resume with remote upload (@arturi, @ifedapoolarewaju)</li><li>server: throttle progress updates sent through websockets, sometimes it can be overwhelming when uploads are getting this fast (@ifedapoolarewaju)</li><li>server: pass file size from Google Drive / Dropbox (@ifedapoolarewaju)</li><li>server: return uploaded file urls (from Google Drive / Dropbox) (@ifedapoolarewaju)</li><li>server: research having less permissions, smaller auth expiration time for security (@ifedapoolarewaju)</li><li>dashboard: basic React component (@arturi)</li><li>core: experiment with <code>nanoraf</code> and <code>requestAnimationFrame</code> (@arturi)</li><li>core: add throttling of progress updates (@arturi)</li><li>dashobard: fix Missing <code>file.progress.bytesTotal</code> property  (@arturi #152)</li><li>dashboard: switch to prettier-bytes for more user-friendly progress updates (@arturi)</li><li>dashboard: fix <code>updateDashboardElWidth()</code> not firing in time, causing container width to be 0 (@arturi)</li><li>multipart: treat all 2xx responses as successful, return xhr object in <code>core:upload-success</code> (@arturi #156 #154)</li><li>dashboard: throttle StatusBar numbers, so they update only once a second (@arturi, @acconut)</li><li>dashboard: add titles to pause/resume/cancel in StatusBar (@arturi)</li><li>dashboard: precise <code>circleLength</code> and <code>stroke-dasharray/stroke-dashoffset</code> calculation for progress circles on FileItem (@arturi)</li><li>dashboard: don’t show per-file detailed progress by default — too much noise (@arturi)</li><li>website: blog post and images cleanup (@arturi)</li></ul><p>Enjoy!</p><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring is in the air and Uppy is feeling particularly full of life. In this post about Uppy 0.15, we have some exciting stories about &lt;code&gt;babel-plugin-yo-yoify&lt;/code&gt;, progress event throttling, and new friends.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.14: Responsive Dashboard, Standalone &amp; Pluggable Server, Dropbox</title>
    <link href="https://uppy.io/blog/2017/02/0.14/"/>
    <id>https://uppy.io/blog/2017/02/0.14/</id>
    <published>2017-02-13T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.465Z</updated>
    
    <content type="html"><![CDATA[<p>Hi! Hope y’all have had great holidays! 🎄 Which reminds us, we still have a gift for you — and we even wrapped it in a package (npm). Look inside and you’ll find that Uppy 0.14!</p><p>“But wait”, you might ask, “where is the 0.13 release that we have been waiting for?”</p><p>Well, let’s just say we are superstitious like that. You won’t see us coding under any ladders either! And we were also in the middle of the holiday season, so we decided to call 0.13 “The Release That Wasn’t” and skip it.</p><p>Let’s take a look at what Uppy 0.14 has in store for you.</p><a id="more"></a><h2 id="Major-Uppy-Server-Updates"><a href="#Major-Uppy-Server-Updates" class="headerlink" title="Major Uppy Server Updates"></a>Major Uppy Server Updates</h2><p><strong>Express.js</strong><br>We’ve switched to Express from Koa. It’s more widely adopted and supported, has larger community and better maintained packages, so we went for it.</p><p><strong>Pluggable or standalone</strong><br>Uppy Server can now be plugged into your existing Express/Koa server app, but you can also still run it as a standalone server. <a href="https://github.com/transloadit/uppy-server#run-as-standalone-server" target="_blank" rel="noopener">See here</a> for further instructions.</p><p><strong>Smooth authentication</strong><br>It used to be the case that when you clicked that stylish “authenticate” [with Google Drive] button, you were taken away from the page, and things tended to get lost. That has now all been made silky smooth: upon clicking the button, a fresh tab will open in your browser, which will take you to the authentication page – be it on Google Drive, Dropbox, or somewhere else. When you are done, this tab is automagically closed, and you are back where you were, authenticated, with all your remote files at hand.</p><p><img class="border" src="/images/blog/0.14/smooth-auth.png"></p><p><strong>Dropbox plugin</strong><br>Dropbox support made it into Uppy this release! 🎉 <a href="https://github.com/ifedapoolarewaju" target="_blank" rel="noopener">Ife</a> rocks like that. (A shoutout here as well to <a href="https://github.com/hedgerh" target="_blank" rel="noopener">Harry</a> for the initial work on Uppy Server and the Google Drive plugin!) Why don’t you <a href="https://uppy.io/examples/dashboard/">give it a try</a>!</p><p><img class="border" src="/images/blog/0.14/uppy-dropbox.png"></p><p>What’s more, the client-side code of Google Drive and Dropbox plugins is slowly being refactored into a generic provider view that can be shared among all services.</p><h2 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h2><p><strong>Responsive UI and more icons</strong><br>The Dashboard now adapts itself to screen sizes big and small. That includes <code>inline</code> mode, where you can set <code>maxWidth</code> and <code>maxHeight</code> in options, like so:</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Dashboard<span class="token punctuation">,</span> <span class="token punctuation">{</span>  maxWidth<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>  maxHeight<span class="token punctuation">:</span> <span class="token number">350</span><span class="token punctuation">,</span>  inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  target<span class="token punctuation">:</span> <span class="token string">'#myUploadContainer'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>We are not using media queries here, but have instead added a <code>UppyDashboard--wide</code> CSS class, which allows for more flexibility — your file uploading widget can be tiny even if the screen is large.</p><p>When there is little space available, the file grid view that you have become used to, will turn into a new compact list view.</p><figure class="wide"><img src="/images/blog/0.14/dashboard-grid-list.jpg"></figure><p>We are also adding more file type icons and trying to be smarter about detecting them. We have new icons for video, audio, text, and PDF for you to enjoy.</p><p><strong>Total / uploaded sizes</strong><br>Total and uploaded sizes have been added to the StatusBar, allowing you and your users to keep track of all those bits and bytes.</p><p><img src="/images/blog/0.14/statusbar-uploaded-total-size.png"></p><p>You can play with all of these new features on <a href="https://uppy.io/examples/dashboard/">the Dashboard example page</a>.</p><!-- more --><h2 id="Per-plugin-locale-settings"><a href="#Per-plugin-locale-settings" class="headerlink" title="Per plugin locale settings"></a>Per plugin locale settings</h2><p>We have moved locale settings from global/core to plugins. By default, each UI plugin ships with an English locale, and you can override any string with your own, like so:</p><figure class="highlight js"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>DragDrop<span class="token punctuation">,</span> <span class="token punctuation">{</span>target<span class="token punctuation">:</span> <span class="token string">'.drop'</span><span class="token punctuation">,</span> locale<span class="token punctuation">:</span> <span class="token punctuation">{</span>  strings<span class="token punctuation">:</span> <span class="token punctuation">{</span>    chooseFile<span class="token punctuation">:</span> <span class="token string">'Valitse tiedoston'</span><span class="token punctuation">,</span>    orDragDrop<span class="token punctuation">:</span> <span class="token string">'tai siirtää tänne'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img src="/images/blog/0.14/dnd-fi.png"></p><p>And just like that, your Drag&amp;Drop plugin now speaks Finnish! <em>Hyvää huomenta!</em> This feature is a work in progress, we are trying to find the sweet spot between <a href="https://github.com/transloadit/uppy/blob/8c6252933813af69c1b71ec4621a7fc14dfb3ab0/src/locales/pt_BR.js" target="_blank" rel="noopener">bundling a whole bunch of strings in packs</a>, which might be redundant (i.e. if you only use the Drag&amp;Drop, you don’t need strings from the Dashboard), and making you choose or set language strings for each UI plugin. We’d love to <a href="https://github.com/transloadit/uppy/issues/42" target="_blank" rel="noopener">hear what you think</a>.</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><ul><li><a href="https://www.npmjs.com/package/yo-yoify" target="_blank" rel="noopener">yo-yoify</a> has been added to our build setup in order to solve a <a href="https://github.com/shama/bel#note" target="_blank" rel="noopener">Function.caller / strict mode issue</a> and to make the app faster/smaller by transforming template strings into pure and fast document calls.</li><li>By the way, Uppy’s UI DOM is powered by <a href="https://www.npmjs.com/package/yo-yo" target="_blank" rel="noopener">yo-yo</a>. We like yo-yo for its simplicity, speed and small size, but sometimes there are issues, one of them being the lack of wide adoption. We are looking at <a href="https://preactjs.com/" target="_blank" rel="noopener">Preact</a>, but are also quite excited about <a href="https://github.com/yoshuawuyts/nanocomponent" target="_blank" rel="noopener">Nanocomponent</a>.</li><li>Progress events that were not being properly sent from Uppy Server as now fixed. As it turns out, this occurred because server uploads were happening too fast, before the client was actually able to connect to the server. :scream: Guess that’s a good problem to have solved!</li><li>We have recently added Uppy to <a href="https://www.producthunt.com/posts/uppy" target="_blank" rel="noopener">Product Hunt</a> and we were very pleased with the warm welcome, we even made it to the front page a few days later. Let’s hope it will help get more people excited about the project.</li></ul><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><p>Here is the full list of changes for version 0.14:</p><ul><li>dashboard: use <code>isWide</code> prop/class instead of media queries, so that compact/mobile version can be used in bigger screens too (@arturi)</li><li>dashboard: basic “list” view in addition to current “grid” view (@arturi)</li><li>dashboard: more icons for file types (@arturi)</li><li>dashboard: add totalSize and totalUploadedSize to StatusBar (@arturi)</li><li>dashboard: figure out where to place Informer, accounting for StatusBar — over the StatusBar for now (@arturi)</li><li>dashboard: add <code>&lt;progress&gt;</code> element for progress bar, like here <a href="https://overcast.fm/+BtuxMygVg/" target="_blank" rel="noopener">https://overcast.fm/+BtuxMygVg/</a>. Added hidden for now, for semantics/accessibility (@arturi)</li><li>dragdrop: show number of selected files, remove upload btn (@arturi)</li><li>build: exclude locales from build (@arturi)</li><li>core: i18n for each plugin in options — local instead of global (@arturi)</li><li>core: add default pluralization (can be overridden in plugin options) to Translator (@arturi)</li><li>core: use yo-yoify to solve <a href="https://github.com/shama/bel#note" target="_blank" rel="noopener">Function.caller / strict mode issue</a> and make our app faster/smaller by transforming template strings into pure and fast document calls (@arturi)</li><li>server: a pluggable uppy-server (express / koa for now) (@ifedapoolarewaju)</li><li>server: standalone uppy-server (@ifedapoolarewaju)</li><li>server: Integrate dropbox plugin (@ifedapoolarewaju)</li><li>server: smooth authentication: after auth you are back in your app where you left, no page reloads (@ifedapoolarewaju)</li><li>tus: fix upload progress from uppy-server (@arturi, @ifedapoolarewaju)</li><li>core: basic React component — DnD (@arturi)</li><li>core: fix support for both ES6 module import and CommonJS requires with <code>add-module-exports</code> babel plugin (@arturi)</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>We appreciate your feedback, feel free to <a href="https://github.com/transloadit/uppy/issues/" target="_blank" rel="noopener">comment on GitHub</a>, send a PR, and hit us on <a href="https://twitter.com/uppy_io" target="_blank" rel="noopener">twitter</a>.</p><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi! Hope y’all have had great holidays! 🎄 Which reminds us, we still have a gift for you — and we even wrapped it in a package (npm). Look inside and you’ll find that Uppy 0.14!&lt;/p&gt;
&lt;p&gt;“But wait”, you might ask, “where is the 0.13 release that we have been waiting for?”&lt;/p&gt;
&lt;p&gt;Well, let’s just say we are superstitious like that. You won’t see us coding under any ladders either! And we were also in the middle of the holiday season, so we decided to call 0.13 “The Release That Wasn’t” and skip it.&lt;/p&gt;
&lt;p&gt;Let’s take a look at what Uppy 0.14 has in store for you.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.12: Responsive. Cancel. Feedback. Refreshed ES6 server</title>
    <link href="https://uppy.io/blog/2016/12/0.12/"/>
    <id>https://uppy.io/blog/2016/12/0.12/</id>
    <published>2016-12-07T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.465Z</updated>
    
    <content type="html"><![CDATA[<p>Hello! Here’s what’s new in Uppy 0.12.</p><h2 id="Dashboard-local-mode-and-multipart-uploads-support-in-UI"><a href="#Dashboard-local-mode-and-multipart-uploads-support-in-UI" class="headerlink" title="Dashboard: local mode and multipart uploads support in UI"></a>Dashboard: local mode and multipart uploads support in UI</h2><p>Prior to this release, we’ve optimized the Dashboard for usage with multiple “acquire plugins”, say Webcam + Google Drive. But sometimes all you need is “local disk” with drag &amp; drop support, nice file previews and progress. And now the Dashboard UI works great with that use case out of the box. When you don’t add (.use) any acquire plugins, it looks like this:</p><figure class="wide"><img src="/images/blog/0.12/uppy-dashboard-local.jpg"></figure><p>Also (prior to this release), we’ve built the Dashboard to work well with <a href="http://tus.io" target="_blank" rel="noopener">tus resumable uploads</a>. That’s why you can pause and resume individual uploads, as well as all at once. But if you use an endpoint that is not yet ready for the future and upload resumability (here’s <a href="https://github.com/tus/tus-node-server" target="_blank" rel="noopener">how</a> to <a href="https://github.com/tus/tusd" target="_blank" rel="noopener">fix that</a>, by the way), the Dashboard UI will show regular “cancel” buttons instead of pause/resume.</p><p>Dashboard is gradually becoming more mobile friendly too, but we’ll be saving some of that stuff for the next release.</p><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>Uppy server has undergone a quite a few changes, including the build setup:</p><ul><li>We are using ES2015, transpiling to ES5 with Babel.</li><li>Added linting, lint-staged, pre-commit all that good stuff.</li><li>Added <code>npm run release</code> command that publishes releases for us.</li><li>Google Drive is working again on the Uppy Server side.</li><li>Refactoring, error handling and more minor improvements.</li></ul><a id="more"></a><h2 id="And"><a href="#And" class="headerlink" title="And"></a>And</h2><ul><li>The website now features a video demo of Uppy in action, check it out: <a href="http://uppy.io">http://uppy.io</a>.</li><li>Fixed a bug where the Webcam would continue to be active (green light on) even after the picture was taken — all good now.</li><li>Improved import/require support for ES2015 and CommonJS modules. Basically, we don’t recommend ES2015 spread imports as a default option just yet — no tree shaking in Browserify and Webpack 1. Both <code>import DragDrop from &#39;uppy/lib/plugin/DragDrop&#39;</code> and <code>const DragDrop = require(&#39;uppy/lib/plugin/DragDrop&#39;)</code> are now supported. We’ve added <code>add-module-exports</code> babel plugin that replaces <code>export default</code> with <code>module.exports</code> for backwards compatibility.</li><li>Optimized dependencies a little: removed the ones we don’t use, upgraded some that we do.</li></ul><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><p>Here is the full list of changes for version 0.12:</p><ul><li>meta: write 0.12 release blog post (@arturi)</li><li>core: figure out import/require for core and plugins — just don’t use spread for plugins (@arturi)</li><li>meta: create a demo GIF, showcasing Uppy Dashboard for the main page, like <a href="https://zeit.co/blog/next" target="_blank" rel="noopener">https://zeit.co/blog/next</a> (@arturi)</li><li>meta: update Readme, update screenshot (@arturi)</li><li>server: add pre-commit and lint-staged (@arturi)</li><li>server: re-do build setup: building at <code>deploy</code> and <code>prepublish</code> when typing <code>npm run release:patch</code> 0.0.1 -&gt; 0.0.2 (@ifedapoolarewaju)</li><li>server: re-do build setup: es6 <code>src</code> -&gt; es5 <code>lib</code> (use plugin packs from Uppy)</li><li>server: re-do build setup: <code>eslint --fix ./src</code> via <a href="http://standardjs.com" target="_blank" rel="noopener">http://standardjs.com</a> (@ifedapoolarewaju)</li><li>server: re-do build setup: <code>babel-node</code> or <code>babel-require</code> could do realtime transpiling for development (how does that hook in with e.g. <code>nodemon</code>?) (@ifedapoolarewaju)</li><li>server: refacor: remove/reduce file redundancy (@ifedapoolarewaju)</li><li>server: error handling: 404 and 401 error handler (@ifedapoolarewaju)</li><li>server: bug fix: failing google drive (@ifedapoolarewaju)</li><li>webcam: stop using the webcam (green light off) after the picture is taken / tab is hidden (@arturi)</li><li>core: allow usage without <code>new</code>, start renaming <code>Core()</code> to <code>Uppy()</code> in examples (@arturi)</li><li>core: api — consider <a href="https://gist.github.com/yoshuawuyts/b5e5b3e7aacbee85a3e61b8a626709ab" target="_blank" rel="noopener">Yosh’s feedback and proposals</a>, come up with follow up questions (@arturi)</li><li>dashboard: local mode — no acquire plugins / external services, just DnD. ActionBrowseTagline component (@arturi)</li><li>dashboard: only show pause/resume when tus is used (@arturi)</li><li>dashboard: cancel uploads button for multipart (@arturi)</li><li>dashboard: responsive design — stage 1 (@arturi)</li><li>meta: write 0.11 release blog post (@arturi)</li></ul><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello! Here’s what’s new in Uppy 0.12.&lt;/p&gt;
&lt;h2 id=&quot;Dashboard-local-mode-and-multipart-uploads-support-in-UI&quot;&gt;&lt;a href=&quot;#Dashboard-local-mode-and-multipart-uploads-support-in-UI&quot; class=&quot;headerlink&quot; title=&quot;Dashboard: local mode and multipart uploads support in UI&quot;&gt;&lt;/a&gt;Dashboard: local mode and multipart uploads support in UI&lt;/h2&gt;&lt;p&gt;Prior to this release, we’ve optimized the Dashboard for usage with multiple “acquire plugins”, say Webcam + Google Drive. But sometimes all you need is “local disk” with drag &amp;amp; drop support, nice file previews and progress. And now the Dashboard UI works great with that use case out of the box. When you don’t add (.use) any acquire plugins, it looks like this:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;&lt;img src=&quot;/images/blog/0.12/uppy-dashboard-local.jpg&quot;&gt;&lt;/figure&gt;

&lt;p&gt;Also (prior to this release), we’ve built the Dashboard to work well with &lt;a href=&quot;http://tus.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tus resumable uploads&lt;/a&gt;. That’s why you can pause and resume individual uploads, as well as all at once. But if you use an endpoint that is not yet ready for the future and upload resumability (here’s &lt;a href=&quot;https://github.com/tus/tus-node-server&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;how&lt;/a&gt; to &lt;a href=&quot;https://github.com/tus/tusd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fix that&lt;/a&gt;, by the way), the Dashboard UI will show regular “cancel” buttons instead of pause/resume.&lt;/p&gt;
&lt;p&gt;Dashboard is gradually becoming more mobile friendly too, but we’ll be saving some of that stuff for the next release.&lt;/p&gt;
&lt;h2 id=&quot;Server&quot;&gt;&lt;a href=&quot;#Server&quot; class=&quot;headerlink&quot; title=&quot;Server&quot;&gt;&lt;/a&gt;Server&lt;/h2&gt;&lt;p&gt;Uppy server has undergone a quite a few changes, including the build setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We are using ES2015, transpiling to ES5 with Babel.&lt;/li&gt;
&lt;li&gt;Added linting, lint-staged, pre-commit all that good stuff.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;npm run release&lt;/code&gt; command that publishes releases for us.&lt;/li&gt;
&lt;li&gt;Google Drive is working again on the Uppy Server side.&lt;/li&gt;
&lt;li&gt;Refactoring, error handling and more minor improvements.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.11: StatusBar, research, https and API docs</title>
    <link href="https://uppy.io/blog/2016/11/0.11/"/>
    <id>https://uppy.io/blog/2016/11/0.11/</id>
    <published>2016-11-15T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.465Z</updated>
    
    <content type="html"><![CDATA[<p>Hey everyone! It has been a while since we last shared some news about our progress and we can’t wait to let you know what’s up(py)!</p><p>In October, we have been working hard to get Uppy 0.11 ready for release. This entailed, among other things, doing a write-up of our general architecture, bringing in a friend to look at what we’ve been up to, experimenting with Redux, and updating the Dashboard UI and website example.</p><p>Here’s what we have been up to, in some more detail.</p><a id="more"></a><h2 id="More-research-and-experiments"><a href="#More-research-and-experiments" class="headerlink" title="More research and experiments"></a>More research and experiments</h2><ul><li>We wrote an <a href="https://github.com/transloadit/uppy/blob/master/ARCHITECTURE.md" target="_blank" rel="noopener">ARCHITECTURE.md</a> document, describing our architecture and APIs.</li><li>Author of <a href="https://github.com/yoshuawuyts/choo" target="_blank" rel="noopener">Choo</a>, Yoshua Wuyts, was invited to take a look at the state of things in Uppy, and he came up with a proposal for some changes, which we’ll be considering in the coming releases.</li><li>We also conducted a few Redux experiments on Uppy, in the process of which, no animals were hurt. :dog:</li></ul><h2 id="Dashboard-example-features-StatusBar-and-updated-UI"><a href="#Dashboard-example-features-StatusBar-and-updated-UI" class="headerlink" title="Dashboard: example features, StatusBar and updated UI"></a>Dashboard: example features, StatusBar and updated UI</h2><p><strong>Dashboard example</strong> <a href="https://uppy.io/examples/dashboard/">on our website</a> now features several options:</p><ul><li>switchting between “inline” and “modal dialog / popup” mode;</li><li>toggling the <code>autoProceed</code> option that starts uploads automatically, without waiting for a click on the “upload” button;</li><li>enabling/disabling acquire plugins, like Google Drive and Webcam.</li></ul><p><img src="/images/blog/0.11/dashboard-example-options.png"></p><p><strong>StatusBar</strong> is a – you guessed it – bar that appears on the bottom of the Dashboard and unifies progress with pause/resume buttons.</p><p><strong>Dashboard UI</strong> has undergone minor improvements, such as: a new “drag files here” icon and tagline. Furthermore, the text before “acquire” icons on the top — Local Disk, Google Drive, Webcam — has been removed (it used to say “Import files from:”). We also added new “remove file” icons. You know, small things, big difference. :sunglasses:</p><p><img src="/images/blog/0.11/uppy-dashboard-oct-2016-1.jpg" alt="Dashboard UI, no files. Text: Drop files here, paste or import from one of the locations above"></p><p><img src="/images/blog/0.11/uppy-dashboard-oct-2016-2.jpg" alt="Dashboard UI, file upload in progress. StatusBar with pause/resume button and progress"></p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>We have upgraded both <a href="http://uppy.io/">uppy.io</a> and <a href="http://tus.io/" target="_blank" rel="noopener">tus.io</a> to support HTTPS with Let’s Encrypt. This will ensure that webcam example now works, secure uploads work, and – hopefully – that all will be well.</p><h2 id="And-more"><a href="#And-more" class="headerlink" title="And more"></a>And more</h2><ul><li>We have renamed FormTag plugin to FileInput and made it pretty by default, with an added option to just show the default browser “choose file”.</li><li><a href="https://github.com/transloadit/uppy/issues/126" target="_blank" rel="noopener">Fixed a bug</a> with <code>autoProceed: true</code> duplicating uploads.</li><li>Refactored Dashboard to only keep active acquire panel in DOM.</li><li>Added PersistentState plugin that saves state to localStorage — which is useful for development.</li><li><a href="https://github.com/transloadit/uppy/pull/131" target="_blank" rel="noopener">Grand refactor of Uppy Server</a> with dynamic controllers.</li><li>Webcam stream no longer flashes when state is updated.</li></ul><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><p>Here is the full list of changes for version 0.11:</p><ul><li>core: log method should have an option to throw error in addition to just logging (@arturi)</li><li>experimental: PersistentState plugin that saves state to localStorage — useful for development (@arturi)</li><li>dashboard: implement new StatusBar with progress and pause/resume buttons <a href="https://github.com/transloadit/uppy/issues/96#issuecomment-249401532" target="_blank" rel="noopener">https://github.com/transloadit/uppy/issues/96#issuecomment-249401532</a> (@arturi)</li><li>dashboard: attempt to throttle StatusBar, so it doesn’t re-render too often (@arturi)</li><li>dashboard: refactor — only load one acquire panel at a time (activeAcquirer or empty), change focus behavior, utilize onload/onunload</li><li>experimental: create a Dashboard UI for Redux refactor (@hedgerh)</li><li>dashboard: make trigger optional — not needed when rendering inline (@arturi)</li><li>fileinput: pretty input element #93 (@arturi)</li><li>meta: document current Uppy architecture and question about the future (@arturi, @hedgerh)</li><li>test: see about adding tests for autoProceed: true (@arturi)</li><li>website: and ability to toggle options in Dashboard example: inline/modal, autoProceed, which plugins are enabled #89 (@arturi)</li><li>website: finish https upgrade for uppy.io, uppy-server and tus, set up pingdom notifications (@arturi, @kvz, @hedgerh)</li><li>website: update guide, API docs and main page example to match current actual API (@arturi)</li><li>uppy-server: Make uppy server have dynamic controllers (@hedgerh)</li></ul><p>We hope you’ll enjoy this latest release. We have got a lot more in store for Uppy and we won’t wait too long with throwing you a bone again!</p><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hey everyone! It has been a while since we last shared some news about our progress and we can’t wait to let you know what’s up(py)!&lt;/p&gt;
&lt;p&gt;In October, we have been working hard to get Uppy 0.11 ready for release. This entailed, among other things, doing a write-up of our general architecture, bringing in a friend to look at what we’ve been up to, experimenting with Redux, and updating the Dashboard UI and website example.&lt;/p&gt;
&lt;p&gt;Here’s what we have been up to, in some more detail.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.10: Getting together, the future, Google Drive UI, exposed events</title>
    <link href="https://uppy.io/blog/2016/09/0.10/"/>
    <id>https://uppy.io/blog/2016/09/0.10/</id>
    <published>2016-09-28T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.465Z</updated>
    
    <content type="html"><![CDATA[<p>Hi! Another month has passed and we have just released a new version of Uppy. Here’s what we’ve been up to.</p><h2 id="Thinking-about-the-future-🔮"><a href="#Thinking-about-the-future-🔮" class="headerlink" title="Thinking about the future 🔮"></a>Thinking about the future 🔮</h2><p>We have been spending quite a lot of time thinking about Uppy’s future and the direction in which we would like to take this project.  Our primary concern is making Uppy as flexible as possible as well as compatible with popular libraries, such as React and React Native.  We also want to make it easy to port Uppy to any environments or ecosystems that are not officially supported.</p><p>We have done a lot of research. We created <a href="https://github.com/hedgerh/uppy-react" target="_blank" rel="noopener">prototypes of Uppy React components</a> and  we also created a new module that we like to call “Uppy Base.” <a href="https://github.com/hedgerh/uppy-base" target="_blank" rel="noopener"><code>uppy-base</code></a> is a thin module containing reusable functionality from some of our plugins that can be used in any ecosystem or environment, without being opinionated about the UI.</p><a id="more"></a><p>Finally, we are also discussing using <a href="https://github.com/reactjs/redux" target="_blank" rel="noopener">Redux</a> as the internal state management store within Uppy.  You can see some drafts under the <a href="https://github.com/transloadit/uppy/tree/master/src/experimental" target="_blank" rel="noopener"><code>src/experimental</code> folder</a>.</p><p>Have a look at the <a href="https://github.com/hedgerh/uppy-base" target="_blank" rel="noopener">Uppy Base repository here</a>.</p><p>Check out <a href="https://github.com/hedgerh/uppy-react" target="_blank" rel="noopener">our Uppy React wrapper and components</a>, which are built on top of Uppy Base.</p><p>Finally, we have played a bit with <a href="https://github.com/css-modules" target="_blank" rel="noopener">CSS Modules</a> and <a href="https://github.com/rtsao/csjs" target="_blank" rel="noopener">CSJS</a>.  We have also tried generating preview thumbnails in Web Workers, as well as with <a href="https://github.com/nodeca/pica" target="_blank" rel="noopener">Pica library</a>.</p><p>We would love to hear feedback on all of this.  Please join our discussion at: <a href="https://github.com/transloadit/uppy/issues/116" target="_blank" rel="noopener">https://github.com/transloadit/uppy/issues/116</a></p><p>You are, of course, more than welcome to chime in on other issues or to open new ones!</p><h2 id="Dashboard-refreshed-look-and-new-features"><a href="#Dashboard-refreshed-look-and-new-features" class="headerlink" title="Dashboard: refreshed look and new features"></a>Dashboard: refreshed look and new features</h2><p>In an attempt to be brave and keep things simple, we have removed the dashed border from inside the Dashboard, rewritten its layout with flexbox, and tried out a new <a href="https://cloud.githubusercontent.com/assets/1199054/18763191/35d31ddc-80da-11e6-9a2c-c46388857135.png" target="_blank" rel="noopener">blend-in-with-the-background-and-blur</a> mode.</p><p><img alt="Refreshed Dashboard UI" src="/images/blog/0.10/dashboard-sep-27-2016.jpg"></p><p>Uppy now also has the option to render the Dashboard inline on the page, instead of the default full modal dialog. To try it out, set <code>inline: true</code> in options, like this: <code>uppy.use(Dashboard, {target: &#39;.myContainer&#39;, inline: true})</code>.</p><p>We have also added a circular progress bar that shows total upload progress, combined with a pause all / resume all button, and an info panel that shows speed, ETA and status for all uploads currently in progress. So you’ll have something fun and useful to look at while you are waiting!</p><p><img alt="Dashboard UI with global pause/resume buttons and a status bar — progress speed & ETA" src="/images/blog/0.10/dashboard-pause-resume-sep-27-2016.jpg"></p><p>Be sure not to miss out on the new Copy Link button that appears after a successful upload, right where the edit button usually is. We know, that’s pretty exciting! And it gets even better: when you click on it, the link is copied to your clipboard. Or, in less capable browsers, a window pops up with a text link, so you can copy it yourself. Bananas!</p><h2 id="Google-Drive-UI-improved"><a href="#Google-Drive-UI-improved" class="headerlink" title="Google Drive UI improved"></a>Google Drive UI improved</h2><p>The UI for Google Drive has received a fresh new redesign.  Check it out!</p><p><img alt="The redesigned file browser UI for Google Drive" src="/images/blog/0.10/google-drive-ui-sep-27-2016.jpg"></p><h2 id="Listen-to-events"><a href="#Listen-to-events" class="headerlink" title="Listen to events"></a>Listen to events</h2><p>We have finally begun to expose events on the <code>uppy</code> instance, so you can now subscribe to them and use them in your app. For example, in order to display an image in your UI after it has been successfully uploaded:</p><figure class="highlight javascript"><table><tr><td class="code"><pre>uppy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'core:upload-success'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  img<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">300</span>  img<span class="token punctuation">.</span>alt <span class="token operator">=</span> id  img<span class="token punctuation">.</span>src <span class="token operator">=</span> url  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>There is also <code>core:upload-progress</code> to track progress and <code>core:success</code> for when all uploads are complete. The <a href="https://github.com/transloadit/uppy/#api" target="_blank" rel="noopener">event documentation</a> is quite small right now, we’ll be adding more once we sort out the API.</p><h2 id="But-wait-there’s-more"><a href="#But-wait-there’s-more" class="headerlink" title="But wait, there’s more!"></a>But wait, there’s more!</h2><ul><li>i18n strings now extend default en_US dictionary: if a certain string is not available in a language, the English string will be displayed.</li><li>Updated readme: improved usage docs and CDN links. Check out <a href="https://github.com/transloadit/uppy/#usage" target="_blank" rel="noopener">the new usage section</a> for yourself. Import, require or script tag? In any case, we’ve got your back.</li><li>Capabilities: we have added <code>capabilities</code> to the state.  For example, if ‘tus’ resumable uploader is used, <code>capabilities.resumable === true</code> is added to the state, so it is easy to check what upload capabilities are available. More to come.</li></ul><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><p>Here is the full list of changes for version 0.10.0:</p><ul><li>core: expose some events/APIs/callbacks to the user: <code>onFileUploaded</code>, <code>onFileSelected</code>, <code>onAllUploaded</code>, <code>addFile</code> (or <code>parseFile</code>), open modal… (@arturi, @hedgerh)</li><li>core: how would Uppy work without the UI, if one wants to Uppy to just add files and upload, while rendering preview and UI by themselves #116 — discussion Part 1 (@arturi, @hedgerh)</li><li>core: refactor towards react compatibility as discussed in <a href="https://github.com/transloadit/uppy/issues/110" target="_blank" rel="noopener">https://github.com/transloadit/uppy/issues/110</a> (@hedgerh)</li><li>core: CSS modules? allow bundling of CSS in JS for simple use in NPM? See #120#issuecomment-242455042, try <a href="https://github.com/rtsao/csjs" target="_blank" rel="noopener">https://github.com/rtsao/csjs</a> — verdict: not yet, try again later (@arturi, @hedgerh)</li><li>core: try Web Workers and FileReaderSync for image resizing again — still slow, probably message payload between webworker and regular thread is huge (@arturi)</li><li>core: i18n strings should extend default en_US dictionary — if a certain string in not available in German, English should be displayed (@arturi)</li><li>dashboard: refactor to smaller components, pass props down (@arturi)</li><li>dashboard: option to render Dashboard inline instead of a modal dialog (@arturi)</li><li>dashboard: global circular progress bar, try out different designs for total upload speed and ETA (@arturi)</li><li>dashboard: show total upload speed and ETA, for all files (@arturi)</li><li>dashboard: copy link to uploaded file button, cross-browser (@arturi) (<a href="http://i.imgur.com/b1Io34n.png" target="_blank" rel="noopener">http://i.imgur.com/b1Io34n.png</a>) (@arturi)</li><li>dashobard: refreshed design and grand refactor (@arturi)</li><li>dashboard: improve file paste the best we can <a href="http://stackoverflow.com/a/22940020" target="_blank" rel="noopener">http://stackoverflow.com/a/22940020</a> (@arturi)</li><li>provider: abstract google drive into provider plugin for reuse (@hedgerh)</li><li>google drive: improve UI (@hedgerh)</li><li>tus: add <code>resumable</code> capability flag (@arturi)</li><li>tus: start fixing pause/resume issues and race conditions (@arturi)</li><li>test: working Uppy example on Require Bin — latest version straight from NPM <a href="http://requirebin.com/?gist=54e076cccc929cc567cb0aba38815105" target="_blank" rel="noopener">http://requirebin.com/?gist=54e076cccc929cc567cb0aba38815105</a> (@arturi @account)</li><li>meta: update readme docs, add unpkg CDN links (<a href="https://unpkg.com/uppy/dist/uppy.min.css" target="_blank" rel="noopener">https://unpkg.com/uppy/dist/uppy.min.css</a>) (@arturi)</li><li>meta: write 0.10 release blog post (@arturi)</li></ul><p>We’ll see you in about a month!</p><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi! Another month has passed and we have just released a new version of Uppy. Here’s what we’ve been up to.&lt;/p&gt;
&lt;h2 id=&quot;Thinking-about-the-future-🔮&quot;&gt;&lt;a href=&quot;#Thinking-about-the-future-🔮&quot; class=&quot;headerlink&quot; title=&quot;Thinking about the future 🔮&quot;&gt;&lt;/a&gt;Thinking about the future 🔮&lt;/h2&gt;&lt;p&gt;We have been spending quite a lot of time thinking about Uppy’s future and the direction in which we would like to take this project.  Our primary concern is making Uppy as flexible as possible as well as compatible with popular libraries, such as React and React Native.  We also want to make it easy to port Uppy to any environments or ecosystems that are not officially supported.&lt;/p&gt;
&lt;p&gt;We have done a lot of research. We created &lt;a href=&quot;https://github.com/hedgerh/uppy-react&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;prototypes of Uppy React components&lt;/a&gt; and  we also created a new module that we like to call “Uppy Base.” &lt;a href=&quot;https://github.com/hedgerh/uppy-base&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;uppy-base&lt;/code&gt;&lt;/a&gt; is a thin module containing reusable functionality from some of our plugins that can be used in any ecosystem or environment, without being opinionated about the UI.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy 0.9: Making Progress, then pause &amp; resume. Remote file uploads, Informer.</title>
    <link href="https://uppy.io/blog/2016/08/0.9.0/"/>
    <id>https://uppy.io/blog/2016/08/0.9.0/</id>
    <published>2016-08-26T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.465Z</updated>
    
    <content type="html"><![CDATA[<p>We have just released Uppy 0.9.0. This release features some changes that we think you will be very excited about.  Let’s see what’s new!</p><a id="more"></a><h2 id="Ability-to-pause-uploads-progress-indicators-amp-ETA"><a href="#Ability-to-pause-uploads-progress-indicators-amp-ETA" class="headerlink" title="Ability to pause uploads, progress indicators &amp; ETA"></a>Ability to pause uploads, progress indicators &amp; ETA</h2><p>The most visible feature that has been added is the ability to pause and resume file uploads.</p><p><img alt="dashboard UI with paused uploads" src="/images/blog/0.9/upload-pause.jpg" class="border"></p><p><img alt="dashboard UI with files uploading and a pause all button" src="/images/blog/0.9/upload-resume.jpg" class="border"></p><p>The upload dashboard now contains more information about uploads, such as the time remaining until an upload is finished. We have also added circular progress indicators to give better visual feedback on an upload’s progress.</p><h2 id="Remote-file-uploads"><a href="#Remote-file-uploads" class="headerlink" title="Remote file uploads"></a>Remote file uploads</h2><p>Remote file uploading is now working again.</p><h2 id="Informer-interface"><a href="#Informer-interface" class="headerlink" title="Informer interface"></a>Informer interface</h2><p>We have added a new <code>Informer</code> plugin (tested with <code>Dashboard</code>, should also work anywhere else) that listens to <code>informer</code> events, like so:</p><figure class="highlight javascript"><table><tr><td class="code"><pre>bus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'informer'</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> type<span class="token punctuation">,</span> duration<span class="token punctuation">)</span></pre></td></tr></table></figure><p> and displays a message bubble for a certain amount of time. It will be useful to notify you when the internet connection is (a licky boom-boom) down (or back up):</p><p><img alt="info: no connection" src="/images/blog/0.9/info-no-connection.jpg" class="border"></p><p>Or when Uppy has successfully uploaded your files:</p><p><img alt="info: upload successful" src="/images/blog/0.9/info-upload-success.jpg" class="border"></p><h2 id="Webcam-Say-Cheese"><a href="#Webcam-Say-Cheese" class="headerlink" title="Webcam: Say Cheese!"></a>Webcam: Say Cheese!</h2><p>The Webcam plugin can now take snapshots and add them to the file dashboard in Uppy’s modal.  We have also added Flash support for Safari/IE users.  The UI has also been cleaned up in the dashboard.  We have temporarily disabled video recording in order to focus on rolling out the snapshot feature.</p><h2 id="Under-the-hood-UI-refactors"><a href="#Under-the-hood-UI-refactors" class="headerlink" title="Under the hood: UI refactors"></a>Under the hood: UI refactors</h2><p>Under the hood, we have made some changes to how the UI is structured.  We are taking a more componentized approach.  For example, the rendering of Google Drive’s UI has been separated into multiple smaller components that can be found in the <a href="https://github.com/transloadit/uppy/tree/master/src/plugins/GoogleDrive" target="_blank" rel="noopener"><code>plugins/GoogleDrive</code> folder</a>.</p><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><p>Here is the full list of changes for version 0.9.0.:</p><ul><li>dashboard: informer interface: message when all uploads are “done” (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>dashboard: improve file paste — not really possible — no file names, weird API, Chrome-only <a href="http://stackoverflow.com/a/22940020" target="_blank" rel="noopener">http://stackoverflow.com/a/22940020</a> (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>meta: add google demo account <a href="https://github.com/kvz" target="_blank" rel="noopener">@kvz</a>)</li><li>meta: Set up a Google testing account that people can use to try the demo (<a href="https://github.com/hedgerh" target="_blank" rel="noopener">@hedgerh</a>)</li><li>meta: write 0.9 release blog post (<a href="https://github.com/hedgerh" target="_blank" rel="noopener">@hedgerh</a>)</li><li>webcam: a barely working webcam snapshot &amp; upload (<a href="https://github.com/hedgerh" target="_blank" rel="noopener">@hedgerh</a>)</li><li>metadata: Uppy + tus empty metadata value issue in Safari <a href="https://github.com/tus/tus-js-client/issues/41" target="_blank" rel="noopener">https://github.com/tus/tus-js-client/issues/41</a> –&gt; tus issue — nailed down, passed to @account (@arturi, @account)</li><li>core: experiment with switching to <code>virtual-dom</code> in a separate branch; experiment with rollup again (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>core: figure out race conditions (animations not completing because file div gets re-added to the dom each time) with <code>yo-yo</code>/<code>morphdom</code> <a href="https://github.com/shama/bel/issues/26#issuecomment-238004130" target="_blank" rel="noopener">https://github.com/shama/bel/issues/26#issuecomment-238004130</a> (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>core: switch to <a href="https://github.com/sethvincent/namespace-emitter" target="_blank" rel="noopener">https://github.com/sethvincent/namespace-emitter</a> — smaller, allows for <code>on(&#39;*&#39;)</code> (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>dashboard: add aria-labels and titles everywhere to improve accessibility #114 (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>dashboard: file name + extension should fit on two lines, truncate in the middle (maybe <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText</a>) (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>dashboard: implement a circular progress indicator on top of the fileItem with play/pause (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>dashboard: refactor to smaller components, as discussed in #110 (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>google drive: refactor to smaller components, as discussed in #110 (<a href="https://github.com/hedgerh" target="_blank" rel="noopener">@hedgerh</a>)</li><li>google drive: add demo account (<a href="https://github.com/hedgerh" target="_blank" rel="noopener">@hedgerh</a>)</li><li>metadata: add labels to fields in fileCard (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>metadata: the aftermath — better UI (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>test: Get IE6 on Win XP to run Uppy and see it fall back to regular form upload #108 (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>test: refactor tests, add DragDrop back (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>tus: update uppy to tus-js-client@1.2.1, test on requirebin (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>tus: add ability to pause/resume all uploads at once (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>tus: add ability to pause/resume upload (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li></ul><p>We hope you will enjoy this latest release. Uppy is still improving every day and we hope to bring you more news about our progress soon!</p><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We have just released Uppy 0.9.0. This release features some changes that we think you will be very excited about.  Let’s see what’s new!&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy version 0.8 released: The Webcam Edition and Meta Data</title>
    <link href="https://uppy.io/blog/2016/08/0.8.0/"/>
    <id>https://uppy.io/blog/2016/08/0.8.0/</id>
    <published>2016-08-17T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.465Z</updated>
    
    <content type="html"><![CDATA[<p>We have just released Uppy 0.8.0 and we can’t wait to tell you more about it. Along with various under-the-hood improvements, this release also contains some very visible upgrades. You can read below for further details.</p><h2 id="Including-Meta-Data"><a href="#Including-Meta-Data" class="headerlink" title="Including Meta Data"></a>Including Meta Data</h2><p>While fetching your files, Uppy is now also able to supply some custom metadata to go along with them. So far, there are three components in place for that: Core API (<code>core:update-meta</code> event), <code>MetaData</code> plugin, and a new panel in Dashboard UI called File Card, which looks like this:</p><p><img alt="metadata dashboard UI, editing file name, future size and adding description" src="/images/blog/0.8/metadata-dashboard.jpg" class="border"></p><a id="more"></a><p>To summon this panel, all you have to do is click the edit button on the Dashboard:</p><p><img alt="metadata dashboard UI, editing file name, future size and adding description" src="/images/blog/0.8/uppy-dashboard-ui.jpg" class="border"></p><p>By default, the only active metadata field is <code>Name</code>. However, if you want to add other fields you can utilize our new and easy to use <code>MetaData</code> plugin:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="token keyword">const</span> uppy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uppy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Dashboard<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>MetaData<span class="token punctuation">,</span> <span class="token punctuation">{</span>    fields<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">'resizeTo'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Resize to'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">1200</span><span class="token punctuation">,</span> placeholder<span class="token punctuation">:</span> <span class="token string">'specify future image size'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">'description'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'Description'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> placeholder<span class="token punctuation">:</span> <span class="token string">'describe what the file is for'</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>And just like that, we have added two fields: <code>Resize</code> and <code>Description</code>. All metadata is sent along with both <a href="http://tus.io" target="_blank" rel="noopener">tus</a> and multipart uploads.</p><h2 id="Webcam-Support"><a href="#Webcam-Support" class="headerlink" title="Webcam Support"></a>Webcam Support</h2><p>We have also added a basic <code>Webcam</code> plugin, which allows you to acquire images directly from your own webcam. This is still a work in progress and we will be improving it in the next release.</p><h2 id="Mime-Types-and-File-Icons"><a href="#Mime-Types-and-File-Icons" class="headerlink" title="Mime Types and File Icons"></a>Mime Types and File Icons</h2><p>Uppy now includes a <a href="https://www.npmjs.com/package/mime-types" target="_blank" rel="noopener">mime-type</a> library that helps us figure out file types by extension.</p><p>Having proper file types also means that we need the right corresponding file icons for the Dashboard UI. We have already added a few and we will soon supply more icons for audio, video, text, PDF and other common file types.</p><h2 id="Previously-on-Uppy-File-Previews-Remote-File-Handling-Accessibility-and-Acceptance-Tests-Stats"><a href="#Previously-on-Uppy-File-Previews-Remote-File-Handling-Accessibility-and-Acceptance-Tests-Stats" class="headerlink" title="Previously on Uppy: File Previews, Remote File Handling, Accessibility and Acceptance Tests Stats"></a>Previously on Uppy: File Previews, Remote File Handling, Accessibility and Acceptance Tests Stats</h2><p>We thought it might be worth taking a moment to list a few highlights from the previous versions as well:</p><ul><li>If a file you selected is an image, its preview thumbnail data URL will be generated and added to <code>file.preview</code> in Uppy’s state. This URL can be used later to render a preview with any plugin. Currently, this is done by the mighty Dashboard.</li><li>It is now also possible to select remote files in Uppy. Simply double-click a file from, for instance, Google Drive, and Uppy will then show it in a preview area.</li><li>We have been doing some more work on accessibility: from now on, when you switch tabs in Modal, it will focus on the first input in that tab. We have also added proper labels and titles, and are doing more research in this area.</li><li>Everybody likes to see stats. That is why, on our website, you can now <a href="http://uppy.io/stats">view stats</a> that show how acceptance tests are performing in various browsers. If a test is successful, that means Uppy will likely be able to load and upload files in that particular browser.</li><li>The Dashboard UI is now way better looking and easier to work with. It replaced the old <code>Modal</code> plugin and it can accept files via drag &amp; drop, local disk and paste (experimental, WIP). It has become our main source of truth and the basic acquire plugin for local files. The DragDrop plugin is still available as a lighter alternative.</li></ul><h2 id="Release-Notes"><a href="#Release-Notes" class="headerlink" title="Release Notes"></a>Release Notes</h2><p>Here is the full list of changes for version 0.8.0.</p><ul><li>core: fix bug: no meta information from uppy-server files (<a href="https://github.com/hedgerh" target="_blank" rel="noopener">@hedgerh</a>)</li><li>core: fix bug: uppy-server file is treated as local and directly uploaded (<a href="https://github.com/hedgerh" target="_blank" rel="noopener">@hedgerh</a>)</li><li>uppy-server: hammering out websockets/oauth (<a href="https://github.com/hedgerh" target="_blank" rel="noopener">@hedgerh</a>, <a href="https://github.com/acconut" target="_blank" rel="noopener">@acconut</a>)</li><li>debugger: introduce MagicLog as a way to debug state changes in Uppy (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>modifier: A MetaData plugin to supply meta data (like width, tag, filename, user_id) (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>modifier: pass custom metadata with non-tus-upload. Maybe mimic meta behavior of tus here, too (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>modifier: pass custom metadata with tus-upload with tus-js-client (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>webcam: initial version: webcam light goes on (<a href="https://github.com/hedgerh" target="_blank" rel="noopener">@hedgerh</a>)</li><li>progress: better icons, styles (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>core: better mime/type detection (via mime + extension) (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>core: add deep-freeze to getState so that we are sure we are not mutating state accidentally (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>meta: release “Uppy Begins” post (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a> <a href="https://github.com/kvz" target="_blank" rel="noopener">@kvz</a>)</li><li>meta: better readme on GitHub and NPM (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>test: add pre-commit &amp; lint-staged (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>test: add next-update <a href="https://www.npmjs.com/package/next-update" target="_blank" rel="noopener">https://www.npmjs.com/package/next-update</a> to check if packages we use can be safely updated (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>website: blog polish — add post authors and their gravatars (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>dashboard: UI revamp, more prototypes, background image, make dashboard nicer (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>dashboard: try a workflow where import from external service slides over and takes up the whole dashboard screen (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li><li>modal: merge modal and dashboard (<a href="https://github.com/arturi" target="_blank" rel="noopener">@arturi</a>)</li></ul><p>We hope you will enjoy this latest release. Uppy is still improving every day and we hope to bring you more news about our progress soon!</p><p>The Uppy Team</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We have just released Uppy 0.8.0 and we can’t wait to tell you more about it. Along with various under-the-hood improvements, this release also contains some very visible upgrades. You can read below for further details.&lt;/p&gt;
&lt;h2 id=&quot;Including-Meta-Data&quot;&gt;&lt;a href=&quot;#Including-Meta-Data&quot; class=&quot;headerlink&quot; title=&quot;Including Meta Data&quot;&gt;&lt;/a&gt;Including Meta Data&lt;/h2&gt;&lt;p&gt;While fetching your files, Uppy is now also able to supply some custom metadata to go along with them. So far, there are three components in place for that: Core API (&lt;code&gt;core:update-meta&lt;/code&gt; event), &lt;code&gt;MetaData&lt;/code&gt; plugin, and a new panel in Dashboard UI called File Card, which looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;metadata dashboard UI, editing file name, future size and adding description&quot; src=&quot;/images/blog/0.8/metadata-dashboard.jpg&quot; class=&quot;border&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Uppy: let’s teach an old dog some new tricks</title>
    <link href="https://uppy.io/blog/2016/07/uppy-begins/"/>
    <id>https://uppy.io/blog/2016/07/uppy-begins/</id>
    <published>2016-07-15T00:00:00.000Z</published>
    <updated>2018-07-11T00:28:44.465Z</updated>
    
    <content type="html"><![CDATA[<p>For the past six months, we have been working hard on uppy.io. We feel that it is high time we gave you a look behind the scenes: what are we working on, and why.</p><p><img src="/images/blog/uppy-begins/uppy-dashboard.jpg"></p><p>The way uploading works has not changed in a meaningful way since the days of our trusty old 56 kbit/s modems. Of course, files have gotten bigger and speeds have increased, but that is more or less all there is to say. If it were up to us – and we hope it is – that is all about to change.</p><p>We at <a href="https://transloadit.com/" target="_blank" rel="noopener">Transloadit</a> are on a mission to change the way the world does uploading. To accomplish this, our first step has been to develop an open protocol for resumable file uploads, called <a href="http://tus.io/" target="_blank" rel="noopener">‘tus’</a>. Finally, that 2GB video upload from your smartphone doesn’t have to start over when your train passes through a tunnel! The protocol got <a href="https://news.ycombinator.com/item?id=10591348" target="_blank" rel="noopener">Hacker News excited</a> on several occasions and is being deployed by, among others, our friends at Vimeo. Now that a stable version 1.0 of ‘tus’ has been released, it is time to put it to the test. A protocol without real-world applications is nothing more than a meaningless document, after all.</p><p>We are therefore excited to tell you about Uppy: the file uploader that will certainly fetch more than just your newspaper.</p><a id="more"></a><h2 id="Why-the-need-for-another-file-uploader"><a href="#Why-the-need-for-another-file-uploader" class="headerlink" title="Why the need for another file uploader?"></a>Why the need for another file uploader?</h2><p>It is true, there are indeed already a good few file uploading solutions out there (<a href="http://www.dropzonejs.com/" target="_blank" rel="noopener">Dropzone</a>, for instance, is quite good). And – for the most part – they do their job. Nevertheless, they are quite limited in their functionality:</p><ul><li><p>You can drag and drop files from local disk, but uploaders that supports Instagram, Dropbox or Google Drive are scarce. The ones out there lock you in with vendors and are hard to customize for own use.</p></li><li><p>File uploaders are seldom mindful of the existence of encoding and processing backends, while the reality is that files often require some form of processing and that the end user would like to receive progress updates with regard to that.</p></li><li><p>None of the currently available file uploaders make use of the standardized resumability that ‘tus’ provides, which makes them less than ideal for handling larger files.</p></li><li><p>Lastly, we feel that the current solutions are sometimes dropping the ball when it comes to a polished user experience. We aim to fix that.</p></li></ul><p>All in all, we think there is definitely some ‘trouble at the old mill’ here and it’s time to let Uppy take care of that!</p><h2 id="Our-plans-for-Uppy"><a href="#Our-plans-for-Uppy" class="headerlink" title="Our plans for Uppy"></a>Our plans for Uppy</h2><p>Uppy will be a JavaScript file uploader that allows you to fetch files, not only from your local disk, but also from places like Dropbox, Instagram, Google Drive, webcams and remote URLs. It will have a modular, plugin-based design, making it lightweight and customizable.</p><p>Cute on the outside, the core of Uppy is very robust – thanks to resumability through ‘tus’. We are confident that Uppy will be able to send even the biggest of files over the smallest of tubes.</p><p>Uppy will also offer first class support for accessing Transloadit’s uploading and encoding backend, making it incredibly versatile. Of course, these are all ultimately just plugins, and Uppy can just as easily be used with your own backend – meaning no need to pay any subscription fees.</p><p>We are intent on making the user experience as smooth and satisfying as possible, in terms of both functionality and visual design. Uppy will have a beautiful, themeable UI and it will look – and work – great on mobile platforms as well. While we hope that advanced users will love the customizable nature of Uppy, an ample selection of presets will also be there to make sure that novice users are not going to be lost in the woods.</p><p>Lastly, and this is a point of special significance to us, Uppy will be completely open source. When Uppy is finished, you will be free to use it for whatever you like. Until that time, we very much welcome your ideas and contributions. There are still a lot of decisions to be made and this is the perfect time to come and influence the end product.</p><p>We are going to work hard on bringing you the best file uploader possible and we’ll keep you informed about the development process on <a href="http://uppy.io/">uppy.io</a>. We can’t wait for you to meet Uppy!</p><blockquote><p>We were on the <a href="https://news.ycombinator.com/item?id=12109410" target="_blank" rel="noopener">Hacker News</a> and <a href="https://www.producthunt.com/posts/uppy" target="_blank" rel="noopener">Product Hunt</a> frontpages. Comments welcome there.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For the past six months, we have been working hard on uppy.io. We feel that it is high time we gave you a look behind the scenes: what are we working on, and why.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/blog/uppy-begins/uppy-dashboard.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;The way uploading works has not changed in a meaningful way since the days of our trusty old 56 kbit/s modems. Of course, files have gotten bigger and speeds have increased, but that is more or less all there is to say. If it were up to us – and we hope it is – that is all about to change.&lt;/p&gt;
&lt;p&gt;We at &lt;a href=&quot;https://transloadit.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Transloadit&lt;/a&gt; are on a mission to change the way the world does uploading. To accomplish this, our first step has been to develop an open protocol for resumable file uploads, called &lt;a href=&quot;http://tus.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;‘tus’&lt;/a&gt;. Finally, that 2GB video upload from your smartphone doesn’t have to start over when your train passes through a tunnel! The protocol got &lt;a href=&quot;https://news.ycombinator.com/item?id=10591348&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hacker News excited&lt;/a&gt; on several occasions and is being deployed by, among others, our friends at Vimeo. Now that a stable version 1.0 of ‘tus’ has been released, it is time to put it to the test. A protocol without real-world applications is nothing more than a meaningless document, after all.&lt;/p&gt;
&lt;p&gt;We are therefore excited to tell you about Uppy: the file uploader that will certainly fetch more than just your newspaper.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
